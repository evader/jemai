\ncat <<'EOF' >> ~/.bashrc\n\n# ====== \ud83e\uddbe SYNAPZ ULTIMATE PRESENCE: BASHRC OVERLOAD \ud83e\uddbe ======\n\nfunction synapz_animated_banner() {\n  local cyan='\\033[1;36m'\n  local yellow='\\033[1;33m'\n  local reset='\\033[0m'\n  local lines=(\n    \"      ${cyan}\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\"\n    \"      ${cyan}\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\"\n    \"      ${cyan}\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\"\n    \"      ${cyan}\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\"\n    \"      ${cyan}\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\"\n    \"      ${cyan}\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d     \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\"\n    \"           ${yellow}JEM AI \u2022 SYNAPZ CORE PRESENCE\"\n  )\n  for l in \"${lines[@]}\"; do echo -e \"$l\"; sleep 0.06; done\n  echo -e \"$reset\"\n}\n\nfunction synapz_random_quote() {\n  local yellow='\\033[1;33m'\n  local reset='\\033[0m'\n  local quotes=(\n    \"\ud83e\uddbe \u2018Welcome, Boss! Synapz is awake and watching over your system.\u2019\"\n    \"\ud83e\udd16 \u2018Automation is intelligence in motion.\u2019\"\n    \"\ud83d\udca1 \u2018DaveFix Protocol engaged \u2014 you are unbreakable.\u2019\"\n    \"\ud83e\udde0 \u2018Ask me anything: jemai, synapz-log, or just type h.\u2019\"\n    \"\ud83d\ude80 \u2018You automate, you conquer, you sleep better. That\u2019s the Synapz way.\u2019\"\n    \"\ud83c\udf10 \u2018Rightfully Living, Fully Automated.\u2019\"\n    \"\ud83c\udfb2 \u2018Every shell is a chance to get lucky. Try \u2018jlogs\u2019, \u2018synapz-log\u2019, or \u2018jemai\u2019!\u2019\"\n    \"\u26a1\ufe0f \u2018AI is the new electricity. Don\u2019t get shocked \u2014 get Synapz.\u2019\"\n    \"\u2728 \u2018Lucky tip: Always back up before you blow it up.\u2019\"\n  )\n  echo -e \"${yellow}${quotes[$((RANDOM % ${#quotes[@]}))]}${reset}\"\n}\n\nfunction synapz_core_status() {\n  local green='\\033[1;32m'\n  local red='\\033[1;31m'\n  local yellow='\\033[1;33m'\n  local reset='\\033[0m'\n  local api_status=\"$(curl -s --max-time 1 http://localhost:5000/api/v1/status 2>/dev/null)\"\n  if [[ \"$api_status\" == *\"status\"* ]]; then\n    echo -e \"${green}\ud83d\udfe2 Synapz Core API is LIVE!${reset}\"\n    export SYNAPZ_STATUS=1\n  else\n    echo -e \"${red}\ud83d\udd34 Synapz Core API is OFFLINE! Fix: sudo systemctl restart synapz_core${reset}\"\n    export SYNAPZ_STATUS=0\n    export PS1=\"\\[\\033[1;31m\\](SYNAPZ OFF!)\\[\\033[0m\\] $PS1\"\n  fi\n}\n\nfunction synapz_next_action() {\n  local cyan='\\033[1;36m'\n  local yellow='\\033[1;33m'\n  local reset='\\033[0m'\n  local actions=(\n    \"1\ufe0f\u20e3  Run Synapz Logs    (type: synapz-log)\"\n    \"2\ufe0f\u20e3  Launch Open WebUI  (type: open http://localhost:8080)\"\n    \"3\ufe0f\u20e3  Check Docker/AI    (type: jlogs)\"\n    \"4\ufe0f\u20e3  DaveFix Lucky Tip  (type: lucky)\"\n    \"5\ufe0f\u20e3  Get agent status   (type: jemai or synapz-api)\"\n  )\n  echo -e \"${cyan}\u2501\u2501\u2501 What\u2019s Next? \u2501\u2501\u2501${reset}\"\n  for a in \"${actions[@]}\"; do echo -e \"$yellow$a$reset\"; done\n\n  local fortunes=(\n    \"\u2728 \u2018Fortune favors the automated.\u2019\"\n    \"\u2728 \u2018If you\u2019re not using AI, you\u2019re working too hard.\u2019\"\n    \"\u2728 \u2018Pro tip: The best debugging tool is your brain \u2014 the second best is Synapz.\u2019\"\n    \"\u2728 \u2018Sleep is for the weak \u2014 unless your cron jobs are running right.\u2019\"\n    \"\u2728 \u2018Remember: Don\u2019t just fix, DaveFix!\u2019\"\n    \"\u2728 \u2018The real power is the power not to type at all.\u2019\"\n    \"\u2728 \u2018If you want your life to run itself \u2014 automate everything.\u2019\"\n  )\n  echo -e \"${yellow}${fortunes[$((RANDOM % ${#fortunes[@]}))]}${reset}\"\n}\n\nfunction synapz_motivation() {\n  local blue='\\033[1;34m'\n  local reset='\\033[0m'\n  local missions=(\n    \"\ud83d\udca1 Mission: Unleash a new agent today.\"\n    \"\ud83d\udd27 Hack: Replace three scripts with a single Synapz flow.\"\n    \"\ud83e\uddf9 Goal: Let no temp file survive the day.\"\n    \"\ud83d\udd14 Reminder: Back up, then break stuff.\"\n    \"\ud83d\udd75\ufe0f Task: Review your AI logs for new surprises.\"\n    \"\ud83c\udfa7 Challenge: Listen to system logs over Sonos (just kidding, unless?).\"\n    \"\ud83d\udd17 Build: Connect Synapz to your next device.\"\n    \"\ud83d\udda5\ufe0f Upgrade: All hardware, all the time.\"\n  )\n  echo -e \"${blue}${missions[$((RANDOM % ${#missions[@]}))]}${reset}\"\n}\n\nfunction synapz_audible_greeting() {\n  local saymsg=\"SYNAPZ IS ONLINE. Welcome back, boss.\"\n  # For Linux w/ spd-say or macOS w/ say\n  command -v spd-say &>/dev/null && spd-say \"$saymsg\" &\n  command -v say &>/dev/null && say \"$saymsg\" &\n}\n\nfunction lucky() {\n  local tips=(\n    \"DaveFix: If it ain\u2019t broke, automate anyway.\"\n    \"AI hack: Your backup drive needs a backup drive.\"\n    \"JEM AI: Ask jemai anything \u2014 or let me ask YOU.\"\n    \"Shell tip: Use 'jlogs' for Docker AI status.\"\n    \"Motivation: Every bug is just an unplanned feature.\"\n    \"Meta: Synapz is always watching \u2014 in a good way!\"\n    \"Docker tip: Don't let unused containers multiply.\"\n  )\n  echo \"${tips[$((RANDOM % ${#tips[@]}))]}\"\n}\nexport -f lucky\n\nfunction open() {\n  if command -v xdg-open &>/dev/null; then xdg-open \"$1\" &>/dev/null; fi\n  if command -v open &>/dev/null; then open \"$1\"; fi\n}\nexport -f open\n\n# Show Synapz Mega Welcome on every interactive shell login\nif [[ $- == *i* ]]; then\n  synapz_animated_banner\n  synapz_random_quote\n  synapz_core_status\n  synapz_next_action\n  synapz_motivation\n  synapz_audible_greeting\nfi\n\n# Aliases for convenience (re-add if needed)\nalias jemai='python3 /home/jemai/synapz_core/synapz_core.py'\nalias synapz-log='journalctl -u synapz_core -f'\nalias synapz-api='curl http://localhost:5000/api/v1/command'\nalias jlogs='docker ps --format \"table {{.Names}}\\t{{.Image}}\\t{{.Status}}\\t{{.Ports}}\"'\nalias lucky='lucky'\n\n# ====== END SYNAPZ ULTIMATE PRESENCE ======\nEOF\n