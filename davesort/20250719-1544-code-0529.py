\nimport os\nimport sqlite3\nfrom fastapi import FastAPI, HTTPException, Request, Depends\nfrom fastapi.responses import JSONResponse\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\nfrom typing import List\nimport secrets\n\nAPI_PASSWORD = \"your_secret_password_here\"  # <<< CHANGE THIS!\n\nDATA_DIR = r\"C:\\JEMAI_HUB\"\nSQLITE_PATH = os.path.join(DATA_DIR, \"jemai_hub.sqlite3\")\n\napp = FastAPI(title=\"JEMAI Memory API\")\nsecurity = HTTPBasic()\n\ndef check_auth(credentials: HTTPBasicCredentials = Depends(security)):\n    correct_password = secrets.compare_digest(credentials.password, API_PASSWORD)\n    if not correct_password:\n        raise HTTPException(status_code=401, detail=\"Unauthorized\")\n\n@app.get(\"/\")\ndef root():\n    return {\"msg\": \"JEMAI Memory API ready\"}\n\n@app.get(\"/search\", dependencies=[Depends(check_auth)])\ndef search(q: str, limit: int = 5):\n    \"\"\"\n    Search memory DB for any chunk containing the keyword/phrase (case-insensitive).\n    \"\"\"\n    conn = sqlite3.connect(SQLITE_PATH)\n    c = conn.cursor()\n    q_clean = f\"%{q.lower()}%\"\n    c.execute(\"SELECT hash, source, title, text, date FROM chunks WHERE LOWER(text) LIKE ? LIMIT ?\", (q_clean, limit))\n    rows = c.fetchall()\n    conn.close()\n    results = [{\"hash\": row[0], \"source\": row[1], \"title\": row[2], \"text\": row[3], \"date\": row[4]} for row in rows]\n    return {\"results\": results}\n\n@app.get(\"/get\", dependencies=[Depends(check_auth)])\ndef get_chunk(hash: str):\n    \"\"\"\n    Retrieve a chunk by its SHA256 hash.\n    \"\"\"\n    conn = sqlite3.connect(SQLITE_PATH)\n    c = conn.cursor()\n    c.execute(\"SELECT hash, source, title, text, date, meta FROM chunks WHERE hash = ?\", (hash,))\n    row = c.fetchone()\n    conn.close()\n    if not row:\n        raise HTTPException(status_code=404, detail=\"Not found\")\n    return {\"hash\": row[0], \"source\": row[1], \"title\": row[2], \"text\": row[3], \"date\": row[4], \"meta\": row[5]}\n\n# (Add more endpoints as you wish!)\n\n# Optional: Error handling\n@app.exception_handler(Exception)\ndef general_exception_handler(request: Request, exc: Exception):\n    return JSONResponse(status_code=500, content={\"error\": str(exc)})\n\n# ----\n# To run: uvicorn jemai_memory_api:app --reload --host 0.0.0.0 --port 8089\n# ----\n