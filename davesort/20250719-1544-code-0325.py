\nimport os\nfrom pathlib import Path\n\n# ==== 1. LLM: Embedded Loader ====\nfrom llama_cpp import Llama  # pip install llama-cpp-python\n# Or, use transformers, or any other direct LLM loader.\n\n# ==== 2. Synapz: Local Import ====\nimport synapz_core  # Place synapz_core.py in same dir or make a real package\n\n# ==== 3. RAG/Chroma ====\nimport chromadb  # pip install chromadb\nfrom chromadb.config import Settings\nfrom langchain_community.embeddings import HuggingFaceEmbeddings\nfrom langchain_community.vectorstores import Chroma\nfrom langchain_core.documents import Document\n\n# ==== 4. (Optional) Rich Text CLI ====\nfrom rich.console import Console\nfrom rich.prompt import Prompt\n\nconsole = Console()\n\n# ==== 5. LOAD LLM ====\nMODEL_PATH = \"/usr/share/ollama/.ollama/models/blobs/your-model.gguf\"\nllm = Llama(model_path=MODEL_PATH, n_ctx=4096, n_gpu_layers=0)  # Adjust params for your box\n\n# ==== 6. SETUP RAG ====\nchroma_dir = \"./chroma_db\"\nembedding = HuggingFaceEmbeddings(model_name=\"sentence-transformers/all-MiniLM-L6-v2\")\nvectordb = Chroma(persist_directory=chroma_dir, embedding_function=embedding)\nvectordb.persist()\n\n# ==== 7. Synapz Baked-In ====\ndef synapz_intent(text):\n    return synapz_core.detect_intent(text)  # whatever method you use\n\n# ==== 8. AI Chat/Command Loop ====\ndef ai_chat(prompt, history=None):\n    res = llm(prompt)\n    return res['choices'][0]['text']\n\ndef main():\n    console.print(\"[bold cyan]\ud83c\udf2c\ufe0f Warmwinds: ALL-IN-ONE AI OS (no ports)[/bold cyan]\")\n    while True:\n        user = Prompt.ask(\"[bold green]You[/bold green]\")\n        if user.strip() in {\"exit\", \"quit\"}:\n            break\n\n        intent = synapz_intent(user)\n        if intent == \"shell\":\n            cmd = synapz_core.extract_command(user)\n            os.system(cmd)\n        elif intent == \"rag\":\n            result = vectordb.similarity_search(user, k=3)\n            console.print(\"[bold yellow]RAG Results:[/bold yellow]\", result)\n        else:\n            ai_response = ai_chat(user)\n            console.print(\"[bold magenta]AI:[/bold magenta]\", ai_response)\n\nif __name__ == \"__main__\":\n    main()\n