\nimport os, sys, time, shutil, traceback, code\nfrom pathlib import Path\n\nJEMAI_FILENAME = Path(__file__).absolute()\nBACKUP_DIR = Path.home() / \".jemai_versions\"\nBACKUP_DIR.mkdir(exist_ok=True)\n\ndef backup_current_version():\n    ts = time.strftime(\"%Y%m%d_%H%M%S\")\n    backup_file = BACKUP_DIR / f\"jemai_{ts}.py\"\n    shutil.copy2(JEMAI_FILENAME, backup_file)\n    print(f\"[JEMAI] Backup saved: {backup_file}\")\n\ndef smoke_test(new_code):\n    test_file = BACKUP_DIR / \"jemai_test.py\"\n    with open(test_file, \"w\") as f:\n        f.write(new_code)\n    try:\n        import subprocess\n        res = subprocess.run([sys.executable, str(test_file)], timeout=5)\n        if res.returncode == 0:\n            print(\"[JEMAI] Smoke test passed.\")\n            return True\n        else:\n            print(f\"[JEMAI] Smoke test failed (exit {res.returncode}).\")\n            return False\n    except Exception as e:\n        print(f\"[JEMAI] Smoke test error: {e}\")\n        return False\n    finally:\n        test_file.unlink(missing_ok=True)\n\ndef update_self(new_code):\n    backup_current_version()\n    with open(JEMAI_FILENAME, \"w\") as f:\n        f.write(new_code)\n    print(f\"[JEMAI] jemai.py updated! Restarting...\\n\")\n    os.execv(sys.executable, [sys.executable, str(JEMAI_FILENAME)])\n\ndef is_python_code(text):\n    \"\"\"Check if a string is likely a block of Python code (quick and dirty).\"\"\"\n    lines = text.splitlines()\n    # Heuristic: at least 5 lines, most lines have \":\" or \"def\" or \"class\"\n    code_lines = sum(1 for l in lines if l.strip().endswith(\":\") or l.strip().startswith((\"def \", \"class \", \"import \", \"from \")))\n    return len(lines) >= 5 and code_lines >= 2\n\ndef get_multiline_input():\n    print(\"\\nPaste your code or type a command. End with Ctrl-D (or Ctrl-Z+Enter on Windows):\")\n    lines = []\n    while True:\n        try:\n            line = input()\n        except EOFError:\n            break\n        lines.append(line)\n    return \"\\n\".join(lines)\n\ndef main_loop():\n    print(\"[JEMAI] Auto-Upgrading Shell. Paste code to upgrade, or type rollback/exit/commands as usual.\")\n    while True:\n        try:\n            cmd = get_multiline_input().strip()\n            if not cmd:\n                continue\n            # AUTO-UPGRADE if it's a block of code\n            if is_python_code(cmd):\n                print(\"[JEMAI] Looks like new code. Attempting auto-upgrade...\")\n                if smoke_test(cmd):\n                    update_self(cmd)\n                else:\n                    print(\"[JEMAI] Upgrade failed! Code not applied. Staying alive.\")\n                continue\n            # Special commands\n            if cmd == \"rollback\":\n                versions = sorted(BACKUP_DIR.glob(\"jemai_*.py\"), reverse=True)\n                for i, v in enumerate(versions):\n                    print(f\"[{i+1}] {v.name}\")\n                sel = input(\"Choose version to restore (number): \")\n                idx = int(sel)-1\n                if 0 <= idx < len(versions):\n                    with open(versions[idx]) as f:\n                        old_code = f.read()\n                    update_self(old_code)\n                else:\n                    print(\"Invalid selection.\")\n            elif cmd == \"exit\":\n                print(\"Bye!\")\n                sys.exit(0)\n            else:\n                # Could add more commands here, or just drop to a REPL\n                print(\"Type/paste code for upgrade, or commands: rollback, exit.\")\n        except Exception as e:\n            print(\"Error:\", e)\n            traceback.print_exc()\n\nif __name__ == \"__main__\":\n    main_loop()\n