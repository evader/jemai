\nimport os\nimport sys\nimport threading\nimport json\nimport requests\nimport logging\nfrom datetime import datetime\nimport time\nimport docker\nfrom flask import Flask, request, jsonify, send_from_directory\nfrom flask_socketio import SocketIO\nfrom pytz import timezone\nfrom langchain_community.embeddings import HuggingFaceEmbeddings\nfrom langchain_community.vectorstores import Chroma\nfrom langchain_community.llms import Ollama\nfrom langchain.chains import RetrievalQA\nfrom langchain.prompts import PromptTemplate\n\n# --- Logging Setup ---\nPERTH_TZ = timezone('Australia/Perth')\nlogging.basicConfig(level=logging.INFO,\n                    format='%(asctime)s - Synapz - %(levelname)s - %(message)s',\n                    datefmt='%d/%m/%y %H:%M:%S')\nlogging.Formatter.converter = lambda *args: datetime.now(PERTH_TZ).timetuple()\nlogger = logging.getLogger(__name__)\n\n# --- Flask & SocketIO ---\napp = Flask(__name__, static_folder='static', template_folder='templates')\nsocketio = SocketIO(app)\n\n# --- RAG Initialization ---\nqa_chain = None\nrag_lock = threading.Lock()\n\ndef initialize_rag():\n    global qa_chain\n    with rag_lock:\n        if qa_chain is not None and qa_chain != \"INIT_FAILED\":\n            logger.info(\"RAG initialization already done.\")\n            return\n\n        logger.info(\"\ud83e\udde0 Initializing Synapz RAG Brain (once)...\")\n        CHROMA_DIR = \"/app/rag/chroma_data\"\n\n        if not os.path.exists(CHROMA_DIR):\n            logger.error(f\"RAG DB not found at {CHROMA_DIR}\")\n            qa_chain = \"INIT_FAILED\"\n            return\n\n        if not os.listdir(CHROMA_DIR):\n            logger.warning(f\"RAG DB at {CHROMA_DIR} is empty, please ingest data.\")\n\n        try:\n            ollama_url = os.environ.get(\"OLLAMA_HOST\", \"http://jemai_prod_ollama:11434\")\n            logger.info(f\"Connecting to Ollama at {ollama_url}...\")\n            requests.head(ollama_url, timeout=10)\n            logger.info(\"Ollama detected, continuing RAG init...\")\n\n            embedder = HuggingFaceEmbeddings(model_name=\"BAAI/bge-small-en-v1.5\", model_kwargs={'device': 'cuda'})\n            db = Chroma(persist_directory=CHROMA_DIR, embedding_function=embedder)\n            retriever = db.as_retriever(search_kwargs={\"k\": 5})\n\n            llm = Ollama(base_url=ollama_url, model=\"mistral:7b\")\n\n            template = \"Context: {context}\\n\\nQuestion: {question}\\n\\nAnswer: \"\n            QA_CHAIN_PROMPT = PromptTemplate.from_template(template)\n\n            qa_chain = RetrievalQA.from_chain_type(\n                llm=llm,\n                chain_type=\"stuff\",\n                retriever=retriever,\n                chain_type_kwargs={\"prompt\": QA_CHAIN_PROMPT},\n                return_source_documents=False\n            )\n            logger.info(\"\u2705 Synapz RAG Brain Online.\")\n        except requests.exceptions.ConnectionError:\n            logger.error(f\"\u274c Ollama not reachable at {ollama_url}\")\n            qa_chain = \"INIT_FAILED\"\n        except Exception as e:\n            logger.error(f\"\u274c RAG init failed: {e}\", exc_info=True)\n            qa_chain = \"INIT_FAILED\"\n\n# --- Routes ---\n@app.route('/')\ndef index():\n    return send_from_directory(app.template_folder, 'index.html')\n\n@socketio.on('query_rag')\ndef handle_rag_query(data):\n    sid = request.sid\n    query = data.get('query')\n    logger.info(f\"Received query from {sid}: {query}\")\n\n    if qa_chain is None:\n        socketio.emit('rag_response', {\"response\": \"Waking Synapz brain, please wait...\"}, room=sid)\n        socketio.start_background_task(target=initialize_rag)\n\n    if qa_chain == \"INIT_FAILED\":\n        socketio.emit('rag_response', {\"error\": \"RAG not initialized. Check logs.\"}, room=sid)\n        return\n\n    def run_query():\n        retries = 0\n        MAX_WAIT = 60\n        while qa_chain is None and retries < MAX_WAIT:\n            logger.info(f\"Waiting for RAG init {retries + 1}/{MAX_WAIT}\")\n            time.sleep(1)\n            retries += 1\n        if qa_chain == \"INIT_FAILED\":\n            socketio.emit('rag_response', {\"error\": \"RAG failed to initialize.\"}, room=sid)\n            return\n        if qa_chain is None:\n            socketio.emit('rag_response', {\"error\": \"RAG initialization timed out.\"}, room=sid)\n            return\n        try:\n            result = qa_chain.run(query)\n            logger.info(f\"Query response length: {len(result)}\")\n            socketio.emit('rag_response', {\"response\": result}, room=sid)\n        except Exception as e:\n            logger.error(f\"RAG query error: {e}\", exc_info=True)\n            socketio.emit('rag_response', {\"error\": f\"Query error: {str(e)}\"}, room=sid)\n\n    socketio.start_background_task(run_query)\n\nif __name__ == '__main__':\n    logger.info(\"Starting JEM AI C&C Web Server\")\n    debug_mode = os.environ.get('DEBUG_MODE', 'False').lower() == 'true'\n    socketio.run(app, host='0.0.0.0', port=5000, debug=debug_mode, allow_unsafe_werkzeug=True)\n