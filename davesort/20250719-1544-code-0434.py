\nimport os, sys, subprocess, time, shutil, datetime, threading, queue, re, signal\nfrom pathlib import Path\n\nVERSIONS_DIR = os.path.expanduser(\"~/.jemai_versions\")\nLOG_DIR = os.path.expanduser(\"~/.jemai_logs\")\nSELF_PATH = os.path.abspath(__file__)\nMIN_PY_VERSION = (3, 8)\nDAEMON_PIDFILE = \"/tmp/jemai_daemon.pid\"\n\nDEPS = [\n    (\"requests\", \"requests\"),\n    (\"pyttsx3\", \"pyttsx3\"),\n    (\"flask\", \"flask\"),           # For web server\n]\nDEP_STATUS = {}\n\ndef log(msg):\n    os.makedirs(LOG_DIR, exist_ok=True)\n    ts = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    line = f\"[{ts}] {msg}\"\n    print(line)\n    with open(os.path.join(LOG_DIR, \"jemai.log\"), \"a\") as f:\n        f.write(line + \"\\n\")\n\ndef ensure_deps():\n    global DEP_STATUS\n    failed = []\n    for mod, pkg in DEPS:\n        try:\n            __import__(mod)\n            DEP_STATUS[mod] = True\n        except ImportError:\n            log(f\"Missing: {mod}. Trying all install methods...\")\n            # Try venv, pipx, pip, apt in order\n            user_pip = [sys.executable, \"-m\", \"pip\", \"install\", \"--user\", pkg]\n            break_pip = [sys.executable, \"-m\", \"pip\", \"install\", \"--break-system-packages\", pkg]\n            apt = [\"apt-get\", \"install\", f\"python3-{pkg}\", \"-y\"]\n            pipx = [\"pipx\", \"install\", pkg]\n            venv_path = os.path.expanduser(\"~/.jemai_venv\")\n            venv_pip = [venv_path + \"/bin/pip\", \"install\", pkg]\n            methods = [user_pip, break_pip, apt, pipx, venv_pip]\n            # venv creation if missing\n            if not os.path.exists(venv_path + \"/bin/activate\"):\n                subprocess.run([sys.executable, \"-m\", \"venv\", venv_path])\n            for cmd in methods:\n                try:\n                    log(f\"Trying: {' '.join(cmd)}\")\n                    res = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=90)\n                    if res.returncode == 0:\n                        log(f\"{mod} installed!\")\n                        DEP_STATUS[mod] = True\n                        break\n                except Exception as e:\n                    log(f\"Failed {cmd}: {e}\")\n            else:\n                log(f\"COULD NOT INSTALL {mod}. Run this manually: sudo apt-get install python3-{pkg}\")\n                DEP_STATUS[mod] = False\n                failed.append(mod)\n    if failed:\n        log(f\"[CRITICAL] Missing modules: {failed}\\nSome features will not work until these are installed.\\n\")\n    else:\n        log(\"All dependencies present.\")\n    return not failed\n\ndef backup_current():\n    os.makedirs(VERSIONS_DIR, exist_ok=True)\n    stamp = datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\")\n    dst = os.path.join(VERSIONS_DIR, f\"jemai_{stamp}.py\")\n    shutil.copy2(SELF_PATH, dst)\n    log(f\"Backup saved to {dst}\")\n\ndef smoke_test(new_code):\n    test_path = os.path.join(VERSIONS_DIR, \"jemai_test.py\")\n    with open(test_path, \"w\") as f:\n        f.write(new_code)\n    try:\n        output = subprocess.check_output(\n            [sys.executable, test_path, \"--smoketest\"],\n            stderr=subprocess.STDOUT, timeout=8\n        )\n        return True, output.decode(errors=\"replace\")\n    except Exception as e:\n        return False, f\"{type(e).__name__}: {e}\"\n\ndef try_upgrade(new_code):\n    log(\"Smoke testing upgrade...\")\n    ok, out = smoke_test(new_code)\n    if ok:\n        log(\"Test passed. Upgrading!\")\n        backup_current()\n        with open(SELF_PATH, \"w\") as f:\n            f.write(new_code)\n        log(\"Upgrade applied! \ud83d\udd04 Restarting myself...\\n\")\n        os.execv(sys.executable, [sys.executable] + sys.argv)\n    else:\n        log(f\"Upgrade failed!\\n{out}\\nStaying alive on old code.\")\n\ndef say(text):\n    if not DEP_STATUS.get(\"pyttsx3\"): return\n    try:\n        import pyttsx3\n        engine = pyttsx3.init()\n        engine.say(text)\n        engine.runAndWait()\n    except Exception as e:\n        log(f\"[TTS ERR] {e}\")\n\ndef ollama_models():\n    if not DEP_STATUS.get(\"requests\"): return []\n    import requests\n    try:\n        r = requests.get(\"http://localhost:11434/api/tags\", timeout=3)\n        tags = r.json().get(\"models\", [])\n        return [m[\"name\"] for m in tags]\n    except Exception:\n        return []\n\ndef ollama_chat(prompt, model):\n    if not DEP_STATUS.get(\"requests\"):\n        return \"[OLLAMA ERR] requests not installed\"\n    import requests\n    try:\n        r = requests.post(\"http://localhost:11434/api/generate\",\n            json={\"model\": model, \"prompt\": prompt, \"stream\": False}, timeout=60)\n        return r.json().get(\"response\", \"[OLLAMA: No reply]\")\n    except Exception as e:\n        return f\"[OLLAMA ERR] {e}\"\n\ndef ai_or_cmd(text):\n    cmd_words = ['ls', 'cd', 'cat', 'mv', 'cp', 'ps', 'top', 'du', 'df', 'find', 'chmod', 'chown', 'kill', 'touch', 'nano', 'vim', 'grep', 'awk', 'head', 'tail']\n    t = text.strip()\n    if t.split()[0] in cmd_words or t.startswith(\"!\"):\n        return \"cmd\"\n    return \"ai\"\n\ndef run_shell(cmd):\n    try:\n        result = subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT, timeout=18)\n        return result.decode(errors=\"replace\")\n    except Exception as e:\n        return f\"[CMD ERR] {type(e).__name__}: {e}\"\n\ndef auto_restart():\n    # If this dies, auto-respawn.\n    while True:\n        try:\n            log(\"JEMAI Master process starting.\")\n            main_loop()\n            log(\"Main loop exited.\")\n            break\n        except Exception as e:\n            log(f\"[AUTO-RESTART] Caught exception: {e}\\nRestarting in 3s...\")\n            time.sleep(3)\n\ndef become_daemon():\n    # Only for Linux! No Windows support yet.\n    pid = os.fork()\n    if pid > 0:\n        with open(DAEMON_PIDFILE, \"w\") as f:\n            f.write(str(pid))\n        sys.exit(0)\n    os.setsid()\n    os.umask(0)\n    # Double-fork to fully detach.\n    if os.fork() > 0: sys.exit(0)\n    sys.stdout = open(os.devnull, \"w\")\n    sys.stderr = open(os.devnull, \"w\")\n    auto_restart()\n\ndef start_web():\n    # Start Flask web server\n    from flask import Flask, request, jsonify\n    app = Flask(\"jemai\")\n    @app.route(\"/\")\n    def home():\n        return \"<h2>\ud83d\udd25 JEMAI Web CLI \ud83d\udd25</h2><form method=post><input name=q autofocus><input type=submit value=Send></form>\"\n    @app.route(\"/\", methods=[\"POST\"])\n    def chat():\n        q = request.form[\"q\"]\n        reply = ollama_chat(q, \"llama3:latest\")\n        return f\"<pre>{reply}</pre><a href='/'>Back</a>\"\n    app.run(host=\"0.0.0.0\", port=7766)\n\ndef main_loop():\n    if \"--smoketest\" in sys.argv:\n        print(\"[JEMAI] Smoke test OK.\")\n        sys.exit(0)\n    if sys.argv.count(\"--daemon\"):\n        become_daemon()\n    if sys.argv.count(\"--web\"):\n        ensure_deps()\n        log(\"Starting web server on 0.0.0.0:7766 ...\")\n        start_web()\n        return\n    # Check Python version\n    if sys.version_info < MIN_PY_VERSION:\n        log(f\"Python {MIN_PY_VERSION[0]}.{MIN_PY_VERSION[1]}+ required. You have {sys.version}. Exiting.\")\n        sys.exit(1)\n    ensure_deps()\n    models = ollama_models() if DEP_STATUS.get(\"requests\") else []\n    current_model = models[0] if models else \"llama3:latest\"\n    print(\"Paste code to auto-upgrade, Ctrl-D to finish, or type commands/chat below.\")\n    while True:\n        try:\n            line = input(f\"JEMAI({current_model})> \").strip()\n            if not line: continue\n            if line.lower() in (\"exit\", \"quit\"):\n                log(\"Exit command received.\"); print(\"Bye!\"); break\n            if line == \"--daemon\":\n                log(\"Switching to daemon mode...\")\n                os.execv(sys.executable, [sys.executable, SELF_PATH, \"--daemon\"])\n            if line == \"--web\":\n                log(\"Switching to web server mode...\")\n                os.execv(sys.executable, [sys.executable, SELF_PATH, \"--web\"])\n            # Paste code blocks to upgrade\n            if line.startswith(\"#\") or line.startswith(\"//\") or line.startswith(\"def \") or line.startswith(\"import \") or line.startswith(\"class \"):\n                print(\"[JEMAI] Paste mode. Enter code, end with Ctrl-D:\")\n                code = line + \"\\n\"\n                while True:\n                    try: c = input(); code += c + \"\\n\"\n                    except EOFError: break\n                try_upgrade(code); continue\n            mode = ai_or_cmd(line)\n            if mode == \"cmd\":\n                output = run_shell(line)\n                print(output)\n                say(output[:120])\n            elif mode == \"ai\":\n                reply = ollama_chat(line, current_model) if DEP_STATUS.get(\"requests\") else \"[AI] (No Ollama: requests missing)\"\n                print(reply)\n                say(reply)\n            else:\n                print(\"[JEMAI] Unknown input.\")\n        except EOFError:\n            print(\"\\n[JEMAI] Paste new code to upgrade, or Ctrl-C/exit to quit.\")\n            try:\n                code = \"\"\n                while True:\n                    c = input()\n                    code += c + \"\\n\"\n            except EOFError:\n                if code.strip(): try_upgrade(code)\n                else: print(\"[JEMAI] Nothing pasted. Bye!\"); break\n        except KeyboardInterrupt:\n            print(\"\\nInterrupted.\"); break\n\nif __name__ == \"__main__\":\n    if \"--daemon\" in sys.argv:\n        become_daemon()\n    else:\n        auto_restart()\n