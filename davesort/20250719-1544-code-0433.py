\nimport os, sys, subprocess, time, shutil, datetime, threading, queue, re\n\nVERSIONS_DIR = os.path.expanduser(\"~/.jemai_versions\")\nSELF_PATH = os.path.abspath(__file__)\nMIN_PY_VERSION = (3, 8)\n\nDEPS = [\n    (\"requests\", \"requests\"),\n    (\"pyttsx3\", \"pyttsx3\"),\n]\nDEP_STATUS = {}\n\ndef ensure_deps():\n    global DEP_STATUS\n    failed = []\n    for mod, pkg in DEPS:\n        try:\n            __import__(mod)\n            DEP_STATUS[mod] = True\n        except ImportError:\n            print(f\"[JEMAI] Missing: {mod}. Attempting install...\")\n            # Try auto-install using --break-system-packages if needed\n            install_cmds = [\n                [sys.executable, \"-m\", \"pip\", \"install\", \"--user\", pkg],\n                [sys.executable, \"-m\", \"pip\", \"install\", \"--break-system-packages\", pkg],\n                [\"apt-get\", \"install\", f\"python3-{pkg}\", \"-y\"]\n            ]\n            for cmd in install_cmds:\n                try:\n                    print(f\"[JEMAI] Trying: {' '.join(cmd)}\")\n                    res = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=60)\n                    if res.returncode == 0:\n                        print(f\"[JEMAI] {mod} installed!\")\n                        DEP_STATUS[mod] = True\n                        break\n                except Exception as e:\n                    print(f\"[JEMAI] Failed {cmd}: {e}\")\n            else:\n                print(f\"[JEMAI] Could NOT install {mod}. Please run:\")\n                print(f\"  sudo apt-get install python3-{pkg}\")\n                DEP_STATUS[mod] = False\n                failed.append(mod)\n    if failed:\n        print(f\"\\n[CRITICAL] Missing modules: {failed}\")\n        print(\"Some features will not work until these are installed.\\n\")\n    else:\n        print(\"[JEMAI] All dependencies are present and working.\\n\")\n    return not failed\n\ndef backup_current():\n    os.makedirs(VERSIONS_DIR, exist_ok=True)\n    stamp = datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\")\n    dst = os.path.join(VERSIONS_DIR, f\"jemai_{stamp}.py\")\n    shutil.copy2(SELF_PATH, dst)\n    print(f\"[JEMAI] Backup saved to {dst}\")\n\ndef smoke_test(new_code):\n    test_path = os.path.join(VERSIONS_DIR, \"jemai_test.py\")\n    with open(test_path, \"w\") as f:\n        f.write(new_code)\n    try:\n        output = subprocess.check_output(\n            [sys.executable, test_path, \"--smoketest\"],\n            stderr=subprocess.STDOUT, timeout=8\n        )\n        return True, output.decode(errors=\"replace\")\n    except Exception as e:\n        return False, f\"{type(e).__name__}: {e}\"\n\ndef try_upgrade(new_code):\n    print(\"[JEMAI] Smoke testing upgrade...\")\n    ok, out = smoke_test(new_code)\n    if ok:\n        print(\"[JEMAI] Test passed. Upgrading!\")\n        backup_current()\n        with open(SELF_PATH, \"w\") as f:\n            f.write(new_code)\n        print(\"[JEMAI] Upgrade applied! \ud83d\udd04 Restarting myself...\\n\")\n        os.execv(sys.executable, [sys.executable] + sys.argv)\n    else:\n        print(\"[JEMAI] Upgrade failed!\\n\", out)\n        print(\"[JEMAI] Staying alive on old code.\\n\")\n\ndef say(text):\n    if not DEP_STATUS.get(\"pyttsx3\"):\n        return\n    try:\n        import pyttsx3\n        engine = pyttsx3.init()\n        engine.say(text)\n        engine.runAndWait()\n    except Exception as e:\n        print(f\"[TTS ERR] {e}\")\n\ndef ollama_models():\n    if not DEP_STATUS.get(\"requests\"): return []\n    import requests\n    try:\n        r = requests.get(\"http://localhost:11434/api/tags\", timeout=3)\n        tags = r.json().get(\"models\", [])\n        return [m[\"name\"] for m in tags]\n    except Exception:\n        return []\n\ndef ollama_chat(prompt, model):\n    if not DEP_STATUS.get(\"requests\"):\n        return \"[OLLAMA ERR] requests not installed\"\n    import requests\n    try:\n        r = requests.post(\"http://localhost:11434/api/generate\",\n            json={\"model\": model, \"prompt\": prompt, \"stream\": False}, timeout=60)\n        return r.json().get(\"response\", \"[OLLAMA: No reply]\")\n    except Exception as e:\n        return f\"[OLLAMA ERR] {e}\"\n\ndef ai_or_cmd(text):\n    cmd_words = ['ls', 'cd', 'cat', 'mv', 'cp', 'ps', 'top', 'du', 'df', 'find', 'chmod', 'chown', 'kill', 'touch', 'nano', 'vim', 'grep', 'awk', 'head', 'tail']\n    t = text.strip()\n    if t.split()[0] in cmd_words or t.startswith(\"!\"):\n        return \"cmd\"\n    return \"ai\"\n\ndef run_shell(cmd):\n    try:\n        result = subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT, timeout=18)\n        return result.decode(errors=\"replace\")\n    except Exception as e:\n        return f\"[CMD ERR] {type(e).__name__}: {e}\"\n\ndef main_loop():\n    if \"--smoketest\" in sys.argv:\n        print(\"[JEMAI] Smoke test OK.\")\n        sys.exit(0)\n    # Check Python version\n    if sys.version_info < MIN_PY_VERSION:\n        print(f\"[FATAL] Python {MIN_PY_VERSION[0]}.{MIN_PY_VERSION[1]}+ required. You have {sys.version}. Exiting.\")\n        sys.exit(1)\n    print(\"\\n\ud83d\udd25 JEMAI ULTIMATE CLI \u2014 AUTO-DEPENDENCY MODE \ud83d\udd25\\n\")\n    ensure_deps()\n    models = ollama_models() if DEP_STATUS.get(\"requests\") else []\n    current_model = models[0] if models else \"llama3:latest\"\n    print(\"Paste code to auto-upgrade, Ctrl-D to finish, or type commands/chat below.\")\n\n    while True:\n        try:\n            line = input(f\"JEMAI({current_model})> \").strip()\n            if not line: continue\n            if line.lower() in (\"exit\", \"quit\"):\n                print(\"Bye!\"); break\n\n            # Paste code blocks to upgrade\n            if line.startswith(\"#\") or line.startswith(\"//\") or line.startswith(\"def \") or line.startswith(\"import \") or line.startswith(\"class \"):\n                print(\"[JEMAI] Paste mode. Enter code, end with Ctrl-D:\")\n                code = line + \"\\n\"\n                while True:\n                    try: c = input(); code += c + \"\\n\"\n                    except EOFError: break\n                try_upgrade(code); continue\n\n            mode = ai_or_cmd(line)\n            if mode == \"cmd\":\n                output = run_shell(line)\n                print(output)\n                say(output[:120])\n            elif mode == \"ai\":\n                reply = ollama_chat(line, current_model) if DEP_STATUS.get(\"requests\") else \"[AI] (No Ollama: requests missing)\"\n                print(reply)\n                say(reply)\n            else:\n                print(\"[JEMAI] Unknown input.\")\n        except EOFError:\n            print(\"\\n[JEMAI] Paste new code to upgrade, or Ctrl-C/exit to quit.\")\n            try:\n                code = \"\"\n                while True:\n                    c = input()\n                    code += c + \"\\n\"\n            except EOFError:\n                if code.strip(): try_upgrade(code)\n                else: print(\"[JEMAI] Nothing pasted. Bye!\"); break\n        except KeyboardInterrupt:\n            print(\"\\nInterrupted.\"); break\n\nif __name__ == \"__main__\":\n    main_loop()\n