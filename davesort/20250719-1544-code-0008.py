\nimport os, sys, logging, datetime, uuid, json, subprocess, psutil\nfrom flask import Flask, request, jsonify\nfrom langchain.chains import RetrievalQA\nfrom langchain.chains.openai_functions import create_openai_fn_chain\nfrom langchain_community.vectorstores import Chroma\nfrom langchain_community.embeddings import HuggingFaceEmbeddings\nfrom langchain_community.llms import Ollama\nfrom langchain.prompts import PromptTemplate\nfrom langchain.docstore.document import Document\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef index():\n    return \"Synapz Core is alive!\", 200\n\n@app.route(\"/status\")\ndef status():\n    return jsonify({\n        \"status\": \"ok\",\n        \"time\": datetime.datetime.now().isoformat(),\n        \"pid\": os.getpid(),\n        \"synapz\": True,\n    })\n\n@app.route(\"/shell\", methods=[\"POST\"])\ndef shell():\n    cmd = request.json.get(\"cmd\")\n    try:\n        result = subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT, timeout=20, text=True)\n        return jsonify({\"ok\": True, \"output\": result})\n    except subprocess.CalledProcessError as e:\n        return jsonify({\"ok\": False, \"output\": e.output, \"code\": e.returncode})\n    except Exception as e:\n        return jsonify({\"ok\": False, \"error\": str(e)})\n\n@app.route(\"/rag\", methods=[\"POST\"])\ndef rag():\n    query = request.json.get(\"query\")\n    db_path = os.environ.get(\"SYNAPZ_RAG_DB\", \"/home/jemai/synapz_local_rag\")\n    embedder = HuggingFaceEmbeddings()\n    vectordb = Chroma(persist_directory=db_path, embedding_function=embedder)\n    qa = RetrievalQA.from_chain_type(\n        llm=Ollama(model=\"llama3\"),\n        chain_type=\"stuff\",\n        retriever=vectordb.as_retriever()\n    )\n    result = qa.run(query)\n    return jsonify({\"ok\": True, \"result\": result})\n\n@app.route(\"/memory\", methods=[\"GET\", \"POST\"])\ndef memory():\n    db_file = \"/home/jemai/synapz_memory.json\"\n    if request.method == \"POST\":\n        data = request.json\n        if not data: return jsonify({\"ok\": False, \"error\": \"No data\"})\n        if os.path.exists(db_file):\n            with open(db_file, \"r\") as f:\n                mem = json.load(f)\n        else:\n            mem = []\n        mem.append({\"time\": datetime.datetime.now().isoformat(), \"data\": data})\n        with open(db_file, \"w\") as f:\n            json.dump(mem, f)\n        return jsonify({\"ok\": True})\n    else:\n        if not os.path.exists(db_file):\n            return jsonify([])\n        with open(db_file, \"r\") as f:\n            mem = json.load(f)\n        return jsonify(mem)\n\n@app.route(\"/sysinfo\")\ndef sysinfo():\n    info = {\n        \"cpu\": psutil.cpu_percent(interval=1),\n        \"ram\": psutil.virtual_memory()._asdict(),\n        \"disk\": psutil.disk_usage('/')._asdict(),\n        \"boot_time\": datetime.datetime.fromtimestamp(psutil.boot_time()).isoformat(),\n        \"users\": [u._asdict() for u in psutil.users()],\n        \"procs\": len(psutil.pids())\n    }\n    return jsonify(info)\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=6000)\n