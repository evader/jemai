\nimport threading, time, queue, os, subprocess\nfrom pathlib import Path\n\ntry:\n    import requests\nexcept ImportError:\n    requests = None  # We'll install it if needed\n\nclass JemaiMaster:\n    def __init__(self):\n        self.jobs = queue.Queue()\n        self.running = True\n        self.hostname = os.uname().nodename\n\n    def run(self):\n        print(f\"[JEMAI] Master Agent starting on {self.hostname}...\")\n        threading.Thread(target=self.voice_daemon, daemon=True).start()\n        threading.Thread(target=self.homeassistant_daemon, daemon=True).start()\n        threading.Thread(target=self.hotword_daemon, daemon=True).start()\n        self.cli_loop()\n\n    def cli_loop(self):\n        while self.running:\n            try:\n                cmd = input(\"\\nJEMAI> \").strip()\n                if cmd.lower() in (\"exit\", \"quit\"):\n                    self.running = False\n                    print(\"Shutting down JEMAI. Goodbye.\")\n                elif cmd:\n                    # Naive split: if input looks like a shell command, run it, else send to AI\n                    if self.looks_like_shell(cmd):\n                        print(\"[SHELL] \" + cmd)\n                        self.run_shell(cmd)\n                    else:\n                        print(\"[AI] \" + cmd)\n                        self.run_ai(cmd)\n            except (KeyboardInterrupt, EOFError):\n                self.running = False\n\n    def looks_like_shell(self, cmd):\n        # If first word is a known shell cmd, or includes '/', treat as shell\n        common = [\"ls\", \"cd\", \"cat\", \"echo\", \"pwd\", \"cp\", \"mv\", \"find\", \"grep\", \"head\", \"tail\"]\n        first = cmd.split()[0]\n        return first in common or \"/\" in first or first.startswith(\".\")\n\n    def run_shell(self, cmd):\n        try:\n            result = subprocess.run(cmd, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n            print(result.stdout)\n        except subprocess.CalledProcessError as e:\n            print(e.stderr)\n\n    def run_ai(self, prompt):\n        # Minimal Ollama local API integration\n        if requests is None:\n            print(\"[ERROR] Python 'requests' module is missing. Run 'pip install requests'\")\n            return\n        ollama_url = \"http://localhost:11434/api/generate\"\n        data = {\"model\": \"llama3:latest\", \"prompt\": prompt, \"stream\": False}\n        try:\n            resp = requests.post(ollama_url, json=data, timeout=60)\n            if resp.ok:\n                answer = resp.json().get(\"response\") or str(resp.json())\n                print(\"[GPT4/Ollama]\", answer.strip())\n            else:\n                print(\"[Ollama ERROR]\", resp.text)\n        except Exception as e:\n            print(\"[Ollama EXCEPTION]\", e)\n\n    def voice_daemon(self):\n        print(\"[JEMAI] (voice output placeholder)\")\n\n    def homeassistant_daemon(self):\n        print(\"[JEMAI] (Home Assistant placeholder)\")\n\n    def hotword_daemon(self):\n        print(\"[JEMAI] (Hotword listener placeholder)\")\n\nif __name__ == \"__main__\":\n    jemai = JemaiMaster()\n    jemai.run()\n