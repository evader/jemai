#!/bin/bash

LTPY_PATH="/opt/ai_offline_setup/docker_setup/lt.py"
LTPY_BACKUP_PATH="${LTPY_PATH}.bak"

echo "--- Applying fixes to lt.py for SocketIO context and global 'jobs' ---"

if [ ! -f "$LTPY_PATH" ]; then
    echo "Error: lt.py not found at $LTPY_PATH. Please ensure it's copied there."
    exit 1
fi

echo "Creating backup of lt.py --> ${LTPY_BACKUP_PATH}"
cp "$LTPY_PATH" "$LTPY_BACKUP_PATH"

# 1. Add 'jobs = {}' global definition
echo "  Adding global 'jobs = {}' definition..."
# Use awk to insert after 'socketio = SocketIO(app)'
sudo awk -i inplace '/socketio = SocketIO(app)/{print; print "jobs = {} # Define the global jobs dictionary"}1' "$LTPY_PATH"

# 2. Update function signatures to accept 'sid' and pass it in subsequent calls
echo "  Updating _run_command function signature and calls..."
sudo sed -i -E "s/def _run_command\(command, job_id\):/def _run_command(command, job_id, sid):/" "$LTPY_PATH"
# Use a complex regex to handle potentially nested quotes and ensure room=sid addition for emit
# This pattern matches any variant of emit('output', {<dict>}) and inserts room=sid
sudo sed -i -E "s/(emit|socketio\.emit)\('output',(\{.*?, 'job_id': job_id\})\)/\1('output', \2, room=sid)/g" "$LTPY_PATH"

echo "  Updating _run_ollama function signature and calls..."
sudo sed -i -E "s/def _run_ollama\(prompt, job_id\):/def _run_ollama(prompt, job_id, sid):/" "$LTPY_PATH"
sudo sed -i -E "s/(_run_command\(shell_command, job_id)/\1, sid)/g" "$LTPY_PATH" # Pass sid to _run_command
sudo sed -i -E "s/(emit|socketio\.emit)\('output',(\{.*?, 'job_id': job_id\})\)/\1('output', \2, room=sid)/g" "$LTPY_PATH" # Handle ollama emits

echo "  Updating _run_esphome function signature and calls..."
sudo sed -i -E "s/def _run_esphome\(yaml_file, job_id\):/def _run_esphome(yaml_file, job_id, sid):/" "$LTPY_PATH"
sudo sed -i -E "s/(socketio\.emit)\('output',(\{.*?, 'job_id': job_id\})\)/\1('output', \2, room=sid)/g" "$LTPY_PATH" # Handle esphome emits

# 3. Update @socketio.on handlers to pass 'sid' to the threaded functions
echo "  Updating @socketio.on handlers for 'sid'..."
sudo sed -i -E "s|@socketio.on\('execute'\)\ndef execute\(data\):|@socketio.on('execute')\ndef execute(data):\n    sid = request.sid # Get session ID from client's request|g" "$LTPY_PATH"
sudo sed -i -E "s|threading.Thread(target=_run_command, args=\(command, job_id\)\).start()|threading.Thread(target=_run_command, args=(command, job_id, sid)).start()|g" "$LTPY_PATH"

sudo sed -i -E "s|@socketio.on\('generate_command'\)\ndef generate_command\(data\):|@socketio.on('generate_command')\ndef generate_command(data):\n    sid = request.sid|g" "$LTPY_PATH"
sudo sed -i -E "s|threading.Thread(target=_run_ollama, args=\(prompt, job_id\)\).start()|threading.Thread(target=_run_ollama, args=(prompt, job_id, sid)).start()|g" "$LTPY_PATH"

sudo sed -i -E "s|@socketio.on\('run_esphome'\)\ndef run_esphome\(data\):|@socketio.on('run_esphome')\ndef run_esphome(data):\n    sid = request.sid|g" "$LTPY_PATH"
sudo sed -i -E "s|threading.Thread(target=_run_esphome, args=\(yaml_file, job_id\)\).start()|threading.Thread(target=_run_esphome, args=(yaml_file, job_id, sid)).start()|g" "$LTPY_PATH"

# For clipboard listener, it's special (no request context), so we need to pass the socketio obj itself.
echo "  Updating clipboard listener to accept socketio instance..."
sudo sed -i -E "s|def _start_clipboard_listener\(\):|def _start_clipboard_listener(sio_instance):|g" "$LTPY_PATH"
sudo sed -i -E "s|socketio\.emit\('output', \{'output': line, 'job_id': job_id\}\)|sio_instance.emit('output', {'output': line, 'job_id': job_id})|g" "$LTPY_PATH"
sudo sed -i -E "s|socketio\.emit\('output', \{'output': f'\\\\n--- ESPHome finished with exit code \{return_code\} ---', 'job_id': job_id\}\)|sio_instance.emit('output', {'output': f'\\\\n--- ESPHome finished with exit code {return_code} ---', 'job_id': job_id})|g" "$LTPY_PATH"
# FIX: The original _run_command call in _start_clipboard_listener
sudo sed -i -E "s|^\s*threading\.Thread\(target=_run_command, args=\(command_to_send, job_id\)\)\.start\(\)|        threading.Thread(target=_run_command, args=(command_to_send, job_id, sio_instance.socketio_manage_local)) # Placeholder for actual sid|g" "$LTPY_PATH"
# FIX: The original _run_ollama call in _start_clipboard_listener
sudo sed -i -E "s|^\s*threading\.Thread\(target=_run_ollama, args=\(prompt, job_id\)\)\.start\(\)|        threading.Thread(target=_run_ollama, args=(prompt, job_id, sio_instance.socketio_manage_local)) # Placeholder for actual sid|g" "$LTPY_PATH"
# FIX: The original _run_esphome call in _start_clipboard_listener
sudo sed -i -E "s|^\s*threading\.Thread\(target=_run_esphome, args=\(yaml_file, job_id\)\)\.start\(\)|        threading.Thread(target=_run_esphome, args=(yaml_file, job_id, sio_instance.socketio_manage_local)) # Placeholder for actual sid|g" "$LTPY_PATH"
# Pass socketio to main clipboard thread
sudo sed -i -E "s|clipboard_listener_thread = threading.Thread(target=_start_clipboard_listener)|clipboard_listener_thread = threading.Thread(target=_start_clipboard_listener, args=(socketio,))|" "$LTPY_PATH"


# 4. Remove 'emit' from Flask import, we use socketio.emit explicitly everywhere
echo "  Ensuring 'emit' is handled correctly or removed from Flask import..."
# Remove 'emit' from the import line if it's there
sudo sed -i -E "s/from flask import ([^,]+, )*emit( *, .*)/\0/g" "$LTPY_PATH"
sudo sed -i -E "s/from flask import (.*)emit, (.*)/from flask import \1\2/" "$LTPY_PATH"
sudo sed -i -E "s/, emit$//g" "$LTPY_PATH"
sudo sed -i -E "s/import emit//g" "$LTPY_PATH"
sudo sed -i -E "s/emit\('/socketio.emit('/g" "$LTPY_PATH" # Re-replace any direct emit that might stick around

# Final clipboard listener changes
echo "  Finalizing clipboard listener setup..."
# Ensure request is available for sid extraction
sudo sed -i -E "s/global clipboard_listener_thread/global clipboard_listener_thread\n    # We need to explicitly access request.sid from the context when the initial socketio.on trigger happens\n    from flask import request/g" "$LTPY_PATH"
sudo sed -i -E "s/def _start_clipboard_listener(sio_instance):/def _start_clipboard_listener(sio_instance_arg):/g" "$LTPY_PATH" # Rename to avoid conflict
sudo sed -i -E "s/sio_instance\.emit/sio_instance_arg.emit/g" "$LTPY_PATH" # Use new name
sudo sed -i -E "s/socketio_manage_local/sio_instance_arg.socketio_manage_local/g" "$LTPY_PATH" # Use new name for clipboard context

# Add import for request
sudo sed -i '/from flask import Flask/a from flask import request' "$LTPY_PATH"
# Final adjustment for passing sid from the handler to the thread
sudo sed -i -E "s/threading\.Thread\(target=_start_clipboard_listener,\s*args=\(socketio\)\)\.start\(\)/threading.Thread(target=_start_clipboard_listener, args=(socketio, request.sid)).start()/g" "$LTPY_PATH"


echo "--- All fixes applied to lt.py ---"
echo "Now, rebuild and restart the lt-backend Docker container, and check its logs."
echo ""
echo "cd /opt/ai_offline_setup/docker_setup"
echo "sudo docker compose build lt-backend"
echo "sudo docker compose up -d lt-backend"
echo "sudo docker logs jemai_lt_backend"