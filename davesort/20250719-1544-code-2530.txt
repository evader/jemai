\n#!/bin/bash\n# setup_synapz_core.sh\n# JEM AI / Synapz Core bootstrap and repair script\n# Author: Synapz AI\n\nset -e\n\n### CONFIG ###\nCORE_DIR=\"/home/jemai/synapz_core\"\nCHROMA_CONTAINER=\"chromadb\"\nOLLAMA_CONTAINER=\"ollama\"\nJUPYTER_CONTAINER=\"jupyter\"\nPORTAINER_CONTAINER=\"portainer\"\nVS_CODE_CONTAINER=\"vscode\"\nLOGFILE=\"/var/log/synapz_core_setup.log\"\n\necho \"=== Synapz Bring-Up Script Starting ===\" | tee $LOGFILE\n\n### 1. Ensure Synapz Core is in place ###\nif [ ! -d \"$CORE_DIR\" ]; then\n  echo \"\u274c Synapz Core directory missing at $CORE_DIR. Creating...\"\n  mkdir -p \"$CORE_DIR\"\n  echo \"# Synapz Core placeholder\" > \"$CORE_DIR/main.py\"\nelse\n  echo \"\u2705 Synapz Core directory found.\"\nfi\n\n### 2. Create systemd service if missing ###\nSERVICE_PATH=\"/etc/systemd/system/synapz-core.service\"\nif [ ! -f \"$SERVICE_PATH\" ]; then\n  echo \"\ud83d\udee0 Setting up systemd service for Synapz Core...\"\n  sudo tee \"$SERVICE_PATH\" > /dev/null <<EOF\n[Unit]\nDescription=Synapz Core Service\nAfter=network.target docker.service\n\n[Service]\nType=simple\nExecStart=/usr/bin/python3 $CORE_DIR/main.py\nWorkingDirectory=$CORE_DIR\nRestart=always\nUser=jemai\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n  sudo systemctl daemon-reexec\n  sudo systemctl daemon-reload\n  sudo systemctl enable synapz-core\nelse\n  echo \"\u2705 Synapz Core systemd service already exists.\"\nfi\n\n### 3. Docker Containers Check ###\nfunction ensure_container() {\n  local name=$1\n  local fallback=$2\n  if ! docker ps --format '{{.Names}}' | grep -q \"$name\"; then\n    echo \"\ud83d\udd04 Restarting or building $name...\"\n    docker start \"$name\" || docker compose -f \"$fallback\" up -d\n  else\n    echo \"\u2705 Docker container '$name' is running.\"\n  fi\n}\n\nensure_container \"$OLLAMA_CONTAINER\" \"$CORE_DIR/docker/ollama-compose.yml\"\nensure_container \"$CHROMA_CONTAINER\" \"$CORE_DIR/docker/chroma-compose.yml\"\nensure_container \"$JUPYTER_CONTAINER\" \"$CORE_DIR/docker/jupyter-compose.yml\"\nensure_container \"$PORTAINER_CONTAINER\" \"$CORE_DIR/docker/portainer-compose.yml\"\nensure_container \"$VS_CODE_CONTAINER\" \"$CORE_DIR/docker/vscode-compose.yml\"\n\n### 4. Verify Audio Output ###\nif command -v pactl &>/dev/null; then\n  echo \"\ud83d\udd0a Setting default audio to system speakers...\"\n  DEFAULT_SINK=$(pactl list short sinks | grep -v headphones | head -n1 | cut -f1)\n  pactl set-default-sink \"$DEFAULT_SINK\"\nelse\n  echo \"\u26a0\ufe0f PulseAudio not detected. Skipping audio routing.\"\nfi\n\n### 5. Vector DB Check ###\necho \"\ud83e\udde0 Checking ChromaDB memory...\"\nif docker exec \"$CHROMA_CONTAINER\" curl -s localhost:8000 | grep -q \"ok\"; then\n  echo \"\u2705 ChromaDB is responsive.\"\nelse\n  echo \"\u274c ChromaDB unresponsive. Check container logs.\"\nfi\n\n### 6. ESP32 (optional) ###\nif ls /dev/ttyUSB* &>/dev/null; then\n  echo \"\ud83d\udd0c ESP32 device detected. Skipping flash (assume pre-flashed)...\"\nelse\n  echo \"\u26a0\ufe0f No ESP32 detected via USB.\"\nfi\n\n### 7. Final Summary ###\necho -e \"\\n\u2705 Synapz Bring-Up Complete.\\nLog saved to: $LOGFILE\"\n