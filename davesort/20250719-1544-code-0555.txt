#!/bin/bash
# =========================================================================================
#  JEM AI GENESIS INSTALLER (V2.1 - The "F***ing Finally" Edition)
# =========================================================================================
#  VERSION: 2025.07.16.H
#  Authored by: Synapz for David Lee
#  Purpose: This master script creates the complete, unified, developer-friendly, and
#           fully configured JEM AI production environment. It incorporates every
#           lesson learned and every architectural decision made. THIS IS THE ONE.
# =========================================================================================

# --- Configuration & Variables ---
PROD_BASE_DIR="/opt/jemai_prod"
PROD_DOCKER_SETUP_DIR="${PROD_BASE_DIR}/docker_setup"
PROD_RAG_DATA_DIR="${PROD_BASE_DIR}/rag/chroma_data"
LEGACY_RAG_SOURCE=$(ls -d /home/jemai/synapz_core_archive_*/rag/chroma_data 2>/dev/null | head -n 1)

# --- Helper functions ---
print_header() { tput setaf 5; echo ""; echo "=== $1 ==="; tput sgr0; echo ""; }
print_task() { tput setaf 6; echo ">>> $1"; tput sgr0; }
print_success() { tput setaf 2; echo "    ‚úÖ  $1"; tput sgr0; }
print_error() { tput setaf 1; echo "    ‚ùå ERROR: $1"; tput sgr0; }
print_note() { tput setaf 3; echo "    NOTE: $1"; tput sgr0; }

# --- Main Logic ---
clear
print_header "INITIATING JEM AI GENESIS SEQUENCE (Installer: ...H - 'The Final Push')"
read -p "This script will build the new JEM AI production environment at ${PROD_BASE_DIR}. Press ENTER to proceed."

# --- Phase 1: Build New Production Environment & Migrate Assets ---
print_task "Phase 1: Building New 'jemai_prod' Structure & Migrating RAG Memory..."
sudo mkdir -p "${PROD_DOCKER_SETUP_DIR}/.devcontainer" "${PROD_DOCKER_SETUP_DIR}/templates" "${PROD_RAG_DATA_DIR}"
sudo chown -R ${USER}:${USER} "$PROD_BASE_DIR"
print_success "Created new production directory structure."

if [ -d "$LEGACY_RAG_SOURCE" ]; then
    sudo cp -r "${LEGACY_RAG_SOURCE}/." "$PROD_RAG_DATA_DIR/"
    print_success "RAG memory (ChromaDB) successfully migrated."
else
    print_error "COULD NOT FIND LEGACY RAG DATA to migrate. Brain will have amnesia."
fi

# --- Phase 2: Generate All Production Files ---
print_task "Phase 2: Generating all unified PROD configuration files..."

# 1. Create the .env file (Single Source of Truth)
cat <<'EOF_ENV' > "${PROD_DOCKER_SETUP_DIR}/.env"
# JEM AI Environment Variables (V1.0)
PROD_RAG_DATA_DIR=/opt/jemai_prod/rag/chroma_data
USER_NOTEBOOKS_DIR=${HOME}/jemai_notebooks
USER_PROJECTS_DIR=/opt/jemai_prod # Set Code-Server root to the whole project
JUPYTER_TOKEN=techno
CODE_SERVER_PASSWORD=techno
OLLAMA_HOST=0.0.0.0
EOF_ENV
print_success ".env configuration file created."

# 2. Create docker-compose.yml
cat <<'EOF_COMPOSE' > "${PROD_DOCKER_SETUP_DIR}/docker-compose.yml"
services:
  jemai_core:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jemai_prod_core
    ports:
      - "5000:5000"
      - "5678:5678" # For the VSCode Debugger
    volumes:
      - ".:/app" 
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "${PROD_RAG_DATA_DIR}:/app/rag/chroma_data"
      - ollama_prod_data:/root/.ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    restart: unless-stopped
    environment:
      - OLLAMA_HOST=${OLLAMA_HOST}
      - TZ=Australia/Perth
    command: python3 -m debugpy --wait-for-client --listen 0.0.0.0:5678 -m flask run --host=0.0.0.0 --port=5000 --no-reload

  # Other services like open-webui, portainer etc. can be added back here later
  # For now, we focus on the core and the dev environment.

volumes:
  ollama_prod_data:
EOF_COMPOSE
print_success "docker-compose.yml (for Dev Container) created."

# 3. Create requirements.txt
cat <<'EOF_REQ' > "${PROD_DOCKER_SETUP_DIR}/requirements.txt"
Flask==3.0.3
Flask-SocketIO==5.3.6
eventlet==0.35.2
psutil==5.9.8
docker==7.1.0
langchain==0.2.1
langchain-community==0.2.1
chromadb==0.5.0
sentence-transformers==2.7.0
ollama==0.2.1
pytz==2024.1
debugpy==1.8.1
EOF_REQ
print_success "requirements.txt created."

# 4. Create Dockerfile
cat <<'EOF_DOCKERFILE' > "${PROD_DOCKER_SETUP_DIR}/Dockerfile"
FROM python:3.10-slim-bookworm
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY . .
EXPOSE 5000 5678
CMD ["python3", "-u", "jemai_core.py"]
EOF_DOCKERFILE
print_success "Dockerfile created."

# 5. Create the unified jemai_core.py
cat <<'EOF_COREPY' > "${PROD_DOCKER_SETUP_DIR}/jemai_core.py"
import os, sys, threading, json, logging
from datetime import datetime
import docker
from flask import Flask, request, jsonify, send_from_directory
from flask_socketio import SocketIO
from pytz import timezone
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores import Chroma
from langchain_community.llms import Ollama
from langchain.chains import RetrievalQA
from langchain.prompts import PromptTemplate

# --- Logging Setup ---
PERTH_TZ = timezone('Australia/Perth')
logging.basicConfig(level=logging.INFO, format='%(asctime)s - Synapz - %(levelname)s - %(message)s', datefmt='%d/%m/%y %H:%M:%S')
logging.Formatter.converter = lambda *args: datetime.now(PERTH_TZ).timetuple()
logger = logging.getLogger(__name__)

# --- App & Globals ---
app = Flask(__name__, static_folder='static', template_folder='templates')
socketio = SocketIO(app, async_mode='eventlet')
docker_client = docker.from_env()
qa_chain = None
rag_lock = threading.Lock()

def initialize_rag():
    global qa_chain
    with rag_lock:
        if qa_chain is not None: return
        logger.info("üß† Initializing Synapz RAG Brain...")
        CHROMA_DIR = "./rag/chroma_data"
        if not os.path.isdir(CHROMA_DIR):
            logger.error(f"RAG DB NOT FOUND AT {CHROMA_DIR}. RAG is offline.")
            qa_chain = "INIT_FAILED"
            return
        try:
            embedder = HuggingFaceEmbeddings(model_name="BAAI/bge-small-en-v1.5", model_kwargs={'device': 'cuda'})
            db = Chroma(persist_directory=CHROMA_DIR, embedding_function=embedder)
            retriever = db.as_retriever(search_kwargs={"k": 5})
            llm = Ollama(model="mistral:7b")
            template = "Context: {context}\n\nQuestion: {question}\n\nAnswer: "
            QA_CHAIN_PROMPT = PromptTemplate.from_template(template)
            qa_chain = RetrievalQA.from_chain_type(
                llm=llm, chain_type="stuff", retriever=retriever, chain_type_kwargs={"prompt": QA_CHAIN_PROMPT}
            )
            logger.info("‚úÖ Synapz RAG Brain is Online.")
        except Exception as e:
            logger.error(f"‚ùå FAILED TO INITIALIZE RAG BRAIN: {e}", exc_info=True)
            qa_chain = "INIT_FAILED"

# --- API & Sockets ---
@app.route('/')
def index():
    return send_from_directory(app.template_folder, 'index.html')

@socketio.on('query_rag')
def handle_rag_query(data):
    sid = request.sid
    query = data.get('query')
    
    if qa_chain is None:
        socketio.emit('rag_response', {"response": "Initializing RAG, please wait..."}, room=sid)
        initialize_rag()
    
    if qa_chain == "INIT_FAILED":
        socketio.emit('rag_response', {"error": "RAG system failed to initialize. Check server logs."}, room=sid)
        return
    
    def run_query():
        try:
            result = qa_chain.run(query) 
            socketio.emit('rag_response', {"response": result}, room=sid)
        except Exception as e:
            socketio.emit('rag_response', {"error": f"RAG query error: {str(e)}"}, room=sid)
    
    socketio.start_background_task(run_query)

if __name__ == '__main__':
    logger.info("--- Starting JEM AI Unified Core ---")
    socketio.run(app, host='0.0.0.0', port=5000, debug=True)
EOF_COREPY
print_success "jemai_core.py (Unified Brain) created."

# 6. Create the templates/index.html
cat <<'EOF_HTML' > "${PROD_DOCKER_SETUP_DIR}/templates/index.html"
<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><title>JEM AI</title><style>body,html{margin:0;padding:0;height:100%;font-family:monospace;background:#0f0f1b;color:#e0e0e0;}#chat-container{display:flex;flex-direction:column;height:100vh;padding:1em;}#chat-output{flex-grow:1;overflow-y:auto;border:1px solid #3e2f5b;padding:1em;margin-bottom:1em;}#chat-input{width:calc(100% - 2.2em);padding:1em;background:#2a2a4a;border:1px solid #3e2f5b;color:white;}</style></head><body><div id="chat-container"><h1>JEM AI Unified Core</h1><div id="chat-output"><div><strong>Synapz:</strong> System Online. Awaiting your command.</div></div><input id="chat-input" type="text" placeholder="Ask Synapz..." autofocus></div><script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.5/socket.io.min.js"></script><script>const socket=io(),chatInput=document.getElementById("chat-input"),chatOutput=document.getElementById("chat-output");chatInput.addEventListener("keypress",t=>{if("Enter"===t.key&&chatInput.value.trim()){const e=chatInput.value;chatOutput.innerHTML+=`<p><strong>You:</strong> ${e}</p>`,socket.emit("query_rag",{query:e}),chatInput.value="",chatOutput.scrollTop=chatOutput.scrollHeight}}),socket.on("rag_response",t=>{const e=t.error||t.response;chatOutput.innerHTML+=`<p><strong>Synapz:</strong> ${e}</p>`,chatOutput.scrollTop=chatOutput.scrollHeight});</script></body></html>
EOF_HTML
print_success "index.html (Simplified UI) created."

# 7. Create VSCode Dev Container config
cat <<'EOF_DEVJSON' > "${PROD_DOCKER_SETUP_DIR}/.devcontainer/devcontainer.json"
{
	"name": "JEM AI Unified Core",
	"dockerComposeFile": ["../docker-compose.yml"],
	"service": "jemai_core",
	"workspaceFolder": "/app",
	"customizations": {
		"vscode": {
			"extensions": ["ms-python.python", "ms-python.debugpy"]
		}
	},
    "postCreateCommand": "pip install -r requirements.txt"
}
EOF_DEVJSON
print_success "VSCode Dev Container configuration created."

# --- Phase 4: Final Instructions ---
print_header "GENESIS COMPLETE - JEM AI IS READY FOR DEVELOPMENT"
echo ""
print_success "All files have been generated in ${PROD_DOCKER_SETUP_DIR}"
print_note "To start developing with live reload and debugging:"
print_note "1. Open the folder '${PROD_BASE_DIR}' in VSCode."
print_note "2. When prompted, click 'Reopen in Container'."
print_note "3. Once inside the Dev Container, press F5 to start debugging."
echo ""
print_note "To run the stack in the background (non-debug mode):"
print_note "1. 'cd ${PROD_DOCKER_SETUP_DIR}'"
print_note "2. 'sudo docker compose up -d'"