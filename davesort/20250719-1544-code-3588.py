\r\nimport os, sys, logging, datetime, uuid, json\r\nimport psutil\r\nfrom flask import Flask, request, jsonify\r\nfrom langchain.chains import RetrievalQA\r\nfrom langchain.chains.openai_functions import create_openai_fn_chain\r\nfrom langchain_community.vectorstores import Chroma\r\nfrom langchain_community.embeddings import HuggingFaceEmbeddings\r\nfrom langchain_community.llms import Ollama\r\nfrom langchain.prompts import PromptTemplate\r\nfrom langchain.docstore.document import Document\r\n\r\nfrom shell_agent import run_shell_command, get_system_summary, check_process, list_top_cpu_processes\r\nfrom synapz_agents import docker_agent\r\n\r\ndef prevent_manual_launch():\r\n    ppid = os.getppid()\r\n    try:\r\n        parent = psutil.Process(ppid)\r\n        if parent.name() not in [\"systemd\", \"python3\"]:\r\n            print(\"\u274c Synapz Core must be started by systemd. Use: sudo systemctl restart synapz_core\")\r\n            sys.exit(1)\r\n    except Exception as e:\r\n        print(f\"\u26a0\ufe0f Launch check failed: {e}\")\r\n        sys.exit(1)\r\n\r\nprevent_manual_launch()\r\n\r\napp = Flask(__name__)\r\nlogging.basicConfig(level=logging.INFO)\r\nlog_handler = logging.FileHandler(\"/var/log/synapz_core_runtime.log\")\r\nlog_handler.setLevel(logging.INFO)\r\napp.logger.addHandler(log_handler)\r\n\r\nCHROMA_PATH = \"./rag/chroma_data\"\r\nGENESIS_PATH = \"./persona/synapz_genesis.txt\"\r\nMEMORY_LOG = \"./rag/conversation_log.jsonl\"\r\n\r\nllm = Ollama(model=\"llama3\", base_url=\"http://localhost:11438\")\r\nembedding_function = HuggingFaceEmbeddings(model_name=\"sentence-transformers/all-MiniLM-L6-v2\")\r\ndb = Chroma(persist_directory=CHROMA_PATH, embedding_function=embedding_function)\r\nretriever = db.as_retriever()\r\n\r\n# Load persona prompt\r\nif os.path.exists(GENESIS_PATH):\r\n    with open(GENESIS_PATH, \"r\") as f:\r\n        SYNAPZ_PERSONA = f.read()\r\nelse:\r\n    SYNAPZ_PERSONA = \"You are Synapz Core, the autonomous AI daemon within JEM AI.\"\r\n\r\n# Persona + context prompt\r\nprompt_template = PromptTemplate.from_template(\\\"\\\"\\\"\r\n{persona}\r\n\r\nContext:\r\n{context}\r\n\r\nUser Question:\r\n{question}\r\n\\\"\\\"\\\")\r\n\r\nqa_chain = RetrievalQA.from_chain_type(\r\n    llm=llm,\r\n    retriever=retriever,\r\n    chain_type=\"stuff\",\r\n    chain_type_kwargs={\"prompt\": prompt_template.partial(persona=SYNAPZ_PERSONA)}\r\n)\r\n\r\n# Save query + response to memory\r\ndef save_to_memory(query, response):\r\n    entry = {\r\n        \"id\": str(uuid.uuid4()),\r\n        \"timestamp\": datetime.datetime.utcnow().isoformat(),\r\n        \"query\": query,\r\n        \"response\": response\r\n    }\r\n    with open(MEMORY_LOG, \"a\") as f:\r\n        f.write(json.dumps(entry) + \"\\\\n\")\r\n    db.add_documents([Document(page_content=query + \"\\\\n\" + response)])\r\n\r\n@app.route('/chat', methods=['POST'])\r\ndef chat():\r\n    data = request.get_json()\r\n    question = data.get(\"query\", \"\")\r\n    if not question:\r\n        return jsonify({\"error\": \"No query provided\"}), 400\r\n    logging.info(f\"/chat: {question}\")\r\n    try:\r\n        result = qa_chain.run(question)\r\n        save_to_memory(question, result)\r\n        return jsonify({\"response\": result})\r\n    except Exception as e:\r\n        logging.exception(\"/chat failed\")\r\n        return jsonify({\"error\": str(e)}), 500\r\n\r\n@app.route(\"/shell\", methods=[\"POST\"])\r\ndef shell():\r\n    cmd = request.get_json().get(\"command\", \"\")\r\n    return jsonify({\"output\": run_shell_command(cmd)})\r\n\r\n@app.route(\"/sysinfo\")\r\ndef sysinfo():\r\n    return jsonify(get_system_summary())\r\n\r\n@app.route(\"/topcpu\")\r\ndef topcpu():\r\n    return jsonify(list_top_cpu_processes())\r\n\r\n@app.route(\"/check_process\", methods=[\"POST\"])\r\ndef check_proc():\r\n    pname = request.get_json().get(\"name\", \"\")\r\n    return jsonify({\"result\": check_process(pname)})\r\n\r\n@app.route(\"/writefile\", methods=[\"POST\"])\r\ndef write_file():\r\n    data = request.get_json()\r\n    try:\r\n        with open(data[\"path\"], \"w\") as f:\r\n            f.write(data[\"content\"])\r\n        return jsonify({\"status\": \"ok\"})\r\n    except Exception as e:\r\n        return jsonify({\"error\": str(e)}), 500\r\n\r\n@app.route(\"/status\")\r\ndef status():\r\n    return jsonify({\"status\": \"Synapz Core is active\", \"cwd\": os.getcwd()})\r\n\r\n@app.route(\"/agent/docker\", methods=[\"POST\"])\r\ndef docker_api():\r\n    data = request.get_json()\r\n    cmd = data.get(\"command\")\r\n    target = data.get(\"target\")\r\n    match cmd:\r\n        case \"list\": return jsonify(docker_agent.list_containers())\r\n        case \"status\": return jsonify(docker_agent.get_status(target))\r\n        case \"restart\": return jsonify({\"result\": docker_agent.restart_container(target)})\r\n        case \"logs\": return jsonify({\"logs\": docker_agent.get_logs(target)})\r\n        case _: return jsonify({\"error\": \"Invalid command\"}), 400\r\n\r\nif __name__ == '__main__':\r\n    logging.info(\"\ud83d\udd0c Synapz Core Flask server starting...\")\r\n    app.run(host=\"0.0.0.0\", port=11436)\r\n