<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JEM AI - Command & Control</title>
    <link href="https://fonts.googleapis.com/css2?family=Fira+Code:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --bg-color: #1a1a2e; /* Deep purple-blue */
            --console-bg: #0f0f1b; /* Even darker for console */
            --text-color: #e0e0e0;
            --header-color: #5d5c61; /* Dark grey */
            --primary-accent: #783bbc; /* Purple */
            --secondary-accent: #1bb2c5; /* Cyan */
            --tertiary-accent: #f0f0f0; /* Light for lines */
            --border-color: #3e2f5b; /* Darker accent */
            --input-bg: #2a2a4a;
            --button-direct: #6a4c9c;
            --button-direct-hover: #5c4387;
            --button-local: #4f5d75;
            --button-local-hover: #424d62;
            --button-nexus: #2a9d8f;
            --button-nexus-hover: #217a6d;
            --status-running: #f7b731; /* Amber */
            --status-complete: #2ec07d; /* Green */
            --status-error: #e74c3c; /* Red */
        }
        body {
            font-family: 'Fira Code', monospace;
            background-color: var(--bg-color);
            color: var(--text-color);
            margin: 0;
            padding: 2em;
            line-height: 1.6;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }
        h1, h2 {
            color: var(--primary-accent);
            border-bottom: 2px solid var(--border-color);
            padding-bottom: 0.5em;
            margin-bottom: 1em;
            font-weight: 500;
        }
        h1 { font-size: 2.2em; }
        h2 { font-size: 1.6em; }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            width: 100%;
        }
        #output {
            background-color: var(--console-bg);
            border: 1px solid var(--border-color);
            padding: 1.5em;
            white-space: pre-wrap;
            word-wrap: break-word;
            min-height: 400px;
            max-height: 70vh;
            overflow-y: auto;
            margin-top: 1.5em;
            border-radius: 8px;
            box-shadow: inset 0 0 10px rgba(0,0,0,0.3);
            font-size: 0.9em;
        }
        .input-group {
            display: flex;
            flex-wrap: wrap;
            gap: 1em;
            margin-top: 1.5em;
            padding: 1em;
            background-color: var(--console-bg);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            align-items: center;
        }
        .input-field {
            flex-grow: 1;
            background-color: var(--input-bg);
            color: var(--text-color);
            border: 1px solid var(--border-color);
            padding: 0.8em 1em;
            font-family: inherit;
            font-size: 1em;
            border-radius: 4px;
            min-width: 200px;
        }
        .button {
            border: none;
            padding: 0.8em 1.5em;
            cursor: pointer;
            font-weight: bold;
            border-radius: 4px;
            transition: background-color 0.2s ease, transform 0.1s ease;
            color: white;
            white-space: nowrap;
        }
        .button:disabled {
            background-color: var(--border-color) !important;
            cursor: not-allowed;
            opacity: 0.6;
        }
        .button-direct { background-color: var(--button-direct); }
        .button-direct:hover:not(:disabled) { background-color: var(--button-direct-hover); transform: translateY(-1px); }
        .button-local-ai { background-color: var(--button-local); }
        .button-local-ai:hover:not(:disabled) { background-color: var(--button-local-hover); transform: translateY(-1px); }
        .button-nexus-ai { background-color: var(--button-nexus); }
        .button-nexus-ai:hover:not(:disabled) { background-color: var(--button-nexus-hover); transform: translateY(-1px); }

        .log-entry {
            margin-bottom: 2em;
            padding-bottom: 1.5em;
            border-bottom: 1px dashed var(--tertiary-accent);
        }
        .prompt-line {
            font-weight: bold;
            display: flex;
            align-items: center;
            margin-bottom: 0.5em;
            color: var(--secondary-accent); /* Default for prompt */
        }
        .prompt-line::before {
            content: '$';
            margin-right: 0.5em;
            color: var(--primary-accent);
        }
        .prompt-local-ai::before { content: 'AI>'; color: var(--button-local); }
        .prompt-nexus-ai::before { content: 'NEXUS>'; color: var(--button-nexus); }
        .status-badge {
            display: inline-block;
            margin-left: 1em;
            padding: 0.2em 0.6em;
            border-radius: 4px;
            font-size: 0.8em;
            font-weight: bold;
            text-transform: uppercase;
        }
        .status-running, .status-thinking { background-color: var(--status-running); color: var(--bg-color); }
        .status-complete { background-color: var(--status-complete); color: var(--bg-color); }
        .status-error { background-color: var(--status-error); color: white; }
        .output-pre {
            background-color: #282a36; /* Dracula bg */
            padding: 1em;
            border-radius: 4px;
            margin-top: 1em;
            overflow-x: auto; /* For long lines */
            border: 1px solid rgba(255,255,255,0.1);
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .input-group {
                flex-direction: column;
                align-items: stretch;
            }
            .button {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>JEM AI - Command & Control</h1>
        <p>Your unified interface for direct interaction, local AI intelligence, and online Nexus connectivity.</p>
        
        <h2>Unified Console</h2>
        <div class="input-group">
            <input type="text" id="command-input" class="input-field" placeholder="Enter shell command or natural language goal..." autofocus>
            <button id="direct-button" class="button button-direct">Run Direct</button>
            <button id="local-ai-button" class="button button-local-ai">Ask Local AI</button>
            <button id="nexus-ai-button" class="button button-nexus-ai">Ask Nexus (Online)</button>
        </div>

        <div id="output"></div>
    </div>

    <script>
        const commandInput = document.getElementById('command-input');
        const directButton = document.getElementById('direct-button');
        const localAiButton = document.getElementById('local-ai-button');
        const nexusAiButton = document.getElementById('nexus-ai-button');
        const outputDiv = document.getElementById('output');
        const baseUrl = window.location.origin;

        function setControlsDisabled(disabled) {
            directButton.disabled = disabled;
            localAiButton.disabled = disabled;
            nexusAiButton.disabled = disabled;
            commandInput.disabled = disabled;
        }

        function createJobElement(jobId, jobData) {
            let jobElement = document.createElement('div');
            jobElement.className = 'log-entry';
            jobElement.id = `job-${jobId}`;
            outputDiv.prepend(jobElement); // Prepend so new jobs appear at top
            return jobElement;
        }

        function updateJobUI(jobId, jobData) {
            let jobElement = document.getElementById(`job-${jobId}`);
            if (!jobElement) {
                jobElement = createJobElement(jobId, jobData);
            }
            
            let type = 'direct';
            if (jobData.output.includes("thinking locally")) type = 'local-ai';
            else if (jobData.output.includes("Contacting Nexus")) type = 'nexus-ai';

            const promptClass = `prompt-${type.replace('_', '-')}`;
            const statusClass = (jobData.status === 'running' || jobData.status === 'thinking') ? 'status-running' : (jobData.status === 'complete' ? 'status-complete' : 'status-error');
            
            // Reconstruct innerHTML to ensure full update including class changes if status changes
            jobElement.innerHTML = `
                <p class="prompt-line ${promptClass}">&nbsp; ${jobData.command} <span class="status-badge ${statusClass}">${jobData.status.toUpperCase()}</span></p>
                <div class="output-pre">${jobData.output.replace(/</g, "&lt;").replace(/>/g, "&gt;")}</div>
            `;
            // Ensure the inner output is re-scrolled to bottom for live updates if it's the latest one
            if (jobElement === outputDiv.firstElementChild) {
                jobElement.querySelector('.output-pre').scrollTop = jobElement.querySelector('.output-pre').scrollHeight;
            }
        }

        async function handleExecute(mode) {
            const inputValue = commandInput.value.trim(); // Trim whitespace
            if (!inputValue) return;

            setControlsDisabled(true);
            
            try {
                // Initial creation of job status for immediate feedback before fetch completes
                const tempJobId = `temp-${Date.now()}`;
                const initialStatus = (mode === 'direct' ? 'running' : 'thinking');
                updateJobUI(tempJobId, {command: inputValue, status: initialStatus, output: `--- Sending command to Lieutenant: '${inputValue}' via ${mode} mode ---`});

                const response = await fetch(`${baseUrl}/run?command=${encodeURIComponent(inputValue)}&mode=${mode}`);
                
                // If the fetch successfully starts a job, the full job update will arrive via polling
                // For now, just clear input and re-enable.
                commandInput.value = '';
                commandInput.focus(); // Keep focus for quick follow-up commands

            } catch (error) {
                // If fetch itself failed (e.g., network error, server not responding)
                updateJobUI(`fetch-err-${Date.now()}`, {command: inputValue, status: 'error', output: `Failed to connect to Lieutenant: ${error.message}`});
            } finally {
                setControlsDisabled(false);
            }
        }
        
        async function fetchAllJobs() {
            try {
                const response = await fetch(`${baseUrl}/list_jobs`);
                const allJobs = await response.json();
                
                // Clear output div only if no jobs are present initially, or completely reset to avoid duplicates on full page load
                if (outputDiv.children.length === 0 && Object.keys(allJobs).length === 0) {
                     outputDiv.innerHTML = ''; 
                } else if (!window._jemaiInitialLoadComplete) { // Prevent full wipe after initial load
                    outputDiv.innerHTML = '';
                    window._jemaiInitialLoadComplete = true; 
                    // Re-render all jobs from scratch one time to prevent issues with initial rendering
                    const sortedJobIds = Object.keys(allJobs).sort((a,b) => b.localeCompare(a)); // Sort by creation time (uuid)
                    for (const jobId of sortedJobIds) {
                        updateJobUI(jobId, allJobs[jobId]);
                    }
                    return; // Don't re-process for loop below this pass
                }

                for (const jobId in allJobs) {
                    updateJobUI(jobId, allJobs[jobId]);
                }
            } catch(e) {
                console.error("Failed to fetch job list:", e);
                // Optionally show a general error in the UI if job list truly fails
            }
        }

        // Add event listeners
        directButton.addEventListener('click', () => handleExecute('direct'));
        localAiButton.addEventListener('click', () => handleExecute('local_ai'));
        nexusAiButton.addEventListener('click', () => handleExecute('nexus_ai'));

        commandInput.addEventListener('keypress', e => { 
            if (e.key === 'Enter') {
                e.preventDefault(); // Prevent default form submission if any
                directButton.click(); 
            }
         });
        
        // Initial fetch and then poll every 2 seconds
        fetchAllJobs();
        setInterval(fetchAllJobs, 2000);
    </script>
</body>
</html>