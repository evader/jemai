\nimport os, sys, time, shutil, datetime, subprocess, difflib\n\nVERSIONS_DIR = os.path.expanduser(\"~/.jemai_versions\")\nSELF_PATH = os.path.abspath(__file__)\n\ndef backup_current():\n    os.makedirs(VERSIONS_DIR, exist_ok=True)\n    stamp = datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\")\n    dst = os.path.join(VERSIONS_DIR, f\"jemai_{stamp}.py\")\n    shutil.copy2(SELF_PATH, dst)\n    print(f\"[JEMAI] Backup saved to {dst}\")\n\ndef smoke_test(new_code):\n    test_path = os.path.join(VERSIONS_DIR, \"jemai_test.py\")\n    with open(test_path, \"w\") as f:\n        f.write(new_code)\n    try:\n        output = subprocess.check_output(\n            [sys.executable, test_path, \"--smoketest\"],\n            stderr=subprocess.STDOUT, timeout=5\n        )\n        return True, output.decode(errors=\"replace\")\n    except Exception as e:\n        return False, f\"{type(e).__name__}: {e}\"\n\ndef try_upgrade(new_code):\n    print(\"[JEMAI] Smoke testing upgrade...\")\n    ok, out = smoke_test(new_code)\n    if ok:\n        print(\"[JEMAI] Test passed. Upgrading!\")\n        backup_current()\n        with open(SELF_PATH, \"w\") as f:\n            f.write(new_code)\n        print(\"[JEMAI] Upgrade applied! \ud83d\udd04 Restarting myself...\\n\")\n        os.execv(sys.executable, [sys.executable] + sys.argv)\n    else:\n        print(\"[JEMAI] Upgrade failed!\\n\", out)\n        print(\"[JEMAI] Staying alive on old code.\\n\")\n\ndef ai_or_cmd(text):\n    # Dumb detection: if looks like a shell command, treat as command\n    cmd_words = ['ls', 'cd', 'cat', 'mv', 'cp', 'ps', 'top', 'du', 'df', 'find', 'chmod', 'chown', 'kill', 'touch', 'nano', 'vim', 'grep', 'awk', 'head', 'tail']\n    if text.strip().split()[0] in cmd_words or text.strip().startswith(\"!\"):\n        return \"cmd\"\n    return \"ai\"\n\ndef run_shell(cmd):\n    try:\n        result = subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT, timeout=15)\n        return result.decode(errors=\"replace\")\n    except Exception as e:\n        return f\"[CMD ERR] {type(e).__name__}: {e}\"\n\ndef ai_reply(prompt):\n    # Placeholder for actual LLM/AI. For now, just echo.\n    return \"[AI] \" + prompt[::-1]  # Reverse as a dummy response\n\ndef main_loop():\n    if \"--smoketest\" in sys.argv:\n        print(\"[JEMAI] Smoke test OK.\")\n        sys.exit(0)\n    print(\"\\n\ud83d\udd25 JEMAI ULTIMATE CLI v1.0 \ud83d\udd25\\n(Paste code to auto-upgrade, Ctrl-D to finish, or type commands/chat below)\")\n    while True:\n        try:\n            line = input(\"JEMAI> \").strip()\n            if not line:\n                continue\n            if line.lower() in (\"exit\", \"quit\"):\n                print(\"Bye!\")\n                break\n            if line.startswith(\"#\") or line.startswith(\"//\"):  # Paste code block (upgrade)\n                print(\"[JEMAI] Paste mode. Enter code, end with Ctrl-D:\")\n                code = line + \"\\n\"\n                while True:\n                    try:\n                        c = input()\n                        code += c + \"\\n\"\n                    except EOFError:\n                        break\n                try_upgrade(code)\n                continue\n            # Detect if user pasted code (multi-line)\n            if line.startswith(\"def \") or line.startswith(\"import \") or line.startswith(\"class \"):\n                print(\"[JEMAI] Looks like code. Paste rest and Ctrl-D to finish.\")\n                code = line + \"\\n\"\n                while True:\n                    try:\n                        c = input()\n                        code += c + \"\\n\"\n                    except EOFError:\n                        break\n                try_upgrade(code)\n                continue\n            # Normal CLI/AI\n            mode = ai_or_cmd(line)\n            if mode == \"cmd\":\n                print(run_shell(line))\n            else:\n                print(ai_reply(line))\n        except EOFError:\n            print(\"\\n[JEMAI] Paste new code to upgrade, or Ctrl-C/exit to quit.\")\n            try:\n                code = \"\"\n                while True:\n                    c = input()\n                    code += c + \"\\n\"\n            except EOFError:\n                if code.strip():\n                    try_upgrade(code)\n                else:\n                    print(\"[JEMAI] Nothing pasted. Bye!\")\n                    break\n        except KeyboardInterrupt:\n            print(\"\\nInterrupted.\")\n            break\n\nif __name__ == \"__main__\":\n    main_loop()\n