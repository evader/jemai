\nimport threading, queue, os, sys, time\nimport pyttsx3\n\nclass JemaiMaster:\n    def __init__(self):\n        self.jobs = queue.Queue()\n        self.running = True\n        self.hostname = os.uname().nodename if hasattr(os, \"uname\") else \"win32\"\n        self.engine = pyttsx3.init()\n        self.agent_name = \"JEMAI\"\n\n    def say(self, text):\n        print(f\"[{self.agent_name} VOICE]> {text}\")\n        self.engine.say(text)\n        self.engine.runAndWait()\n\n    def run(self):\n        self.say(f\"Booting on {self.hostname}. Welcome, Dave.\")\n        threading.Thread(target=self.voice_daemon, daemon=True).start()\n        threading.Thread(target=self.homeassistant_daemon, daemon=True).start()\n        threading.Thread(target=self.hotword_daemon, daemon=True).start()\n        threading.Thread(target=self.background_agent, daemon=True).start()\n        self.cli_loop()\n\n    def cli_loop(self):\n        while self.running:\n            try:\n                cmd = input(f\"\\n[{self.agent_name}] > \").strip()\n                if cmd.lower() in (\"exit\", \"quit\"):\n                    self.say(\"Shutting down. Goodbye.\")\n                    self.running = False\n                elif cmd:\n                    self.handle_command(cmd)\n            except (KeyboardInterrupt, EOFError):\n                self.say(\"Interrupt received, shutting down.\")\n                self.running = False\n\n    def handle_command(self, cmd):\n        if cmd.startswith(\"!\"):\n            # Direct shell command\n            os.system(cmd[1:])\n        elif cmd.lower().startswith(\"say \"):\n            self.say(cmd[4:].strip())\n        elif cmd.lower() in (\"who are you\", \"about\"):\n            self.say(f\"I am {self.agent_name}, your AI OS core. Ready to expand, orchestrate, or destroy.\")\n        elif \"directory\" in cmd.lower() or \"ls\" in cmd.lower():\n            files = os.listdir(os.getcwd())\n            self.say(f\"Directory listing: {', '.join(files)}\")\n            print(\"\\n\".join(files))\n        elif \"time\" in cmd.lower():\n            now = time.ctime()\n            self.say(f\"The current time is {now}\")\n        elif \"fix\" in cmd.lower():\n            self.say(\"Running full system audit and attempting fix.\")\n            # TODO: Integrate Synapz here\n        elif cmd.lower().startswith(\"read \"):\n            fn = cmd[5:].strip()\n            try:\n                with open(fn, \"r\") as f:\n                    data = f.read()\n                self.say(f\"File {fn} contents loaded.\")\n                print(data)\n            except Exception as e:\n                self.say(f\"Failed to read file: {e}\")\n        elif cmd.lower().startswith(\"write \"):\n            fn = cmd[6:].strip()\n            print(\"Paste your content below. Ctrl+D (or Ctrl+Z on Win) to save.\")\n            lines = sys.stdin.read()\n            try:\n                with open(fn, \"w\") as f:\n                    f.write(lines)\n                self.say(f\"File {fn} saved.\")\n            except Exception as e:\n                self.say(f\"Failed to write file: {e}\")\n        elif cmd.lower().startswith(\"append \"):\n            fn = cmd[7:].strip()\n            print(\"Paste your content below. Ctrl+D (or Ctrl+Z on Win) to save.\")\n            lines = sys.stdin.read()\n            try:\n                with open(fn, \"a\") as f:\n                    f.write(lines)\n                self.say(f\"File {fn} appended.\")\n            except Exception as e:\n                self.say(f\"Failed to append file: {e}\")\n        else:\n            # Fallback to agent LLM (TODO: plug in Ollama/Synapz here)\n            self.say(\"Processing with internal LLM agent...\")\n            print(f\"[LLM Placeholder] You said: {cmd}\")\n\n    # ---- Placeholder daemons ----\n    def voice_daemon(self):\n        self.say(\"Voice system live.\")\n\n    def homeassistant_daemon(self):\n        print(\"[JEMAI] Home Assistant integration loaded (stub).\")\n\n    def hotword_daemon(self):\n        print(\"[JEMAI] Hotword listening enabled (stub).\")\n\n    def background_agent(self):\n        while self.running:\n            # Autonomous tasks, future job queue etc.\n            time.sleep(5)\n\nif __name__ == \"__main__\":\n    JemaiMaster().run()\n