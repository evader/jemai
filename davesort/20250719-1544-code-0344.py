\n# synapz_core.py\nimport os, subprocess, json, time\nfrom rich.console import Console\n\nclass Synapz:\n    def __init__(self, console):\n        self.console = console\n\n    def check_system_status(self):\n        self.console.print(\"[cyan]System status:[/cyan]\")\n        self.console.print(os.uname())\n        self.console.print(shell('uptime'))\n\n    def fix_ollama(self):\n        self.console.print(\"[yellow]Checking Ollama service...[/yellow]\")\n        if os.system(\"systemctl is-active --quiet ollama\") == 0:\n            self.console.print(\"[green]Ollama running[/green]\")\n        else:\n            self.console.print(\"[red]Ollama not running, starting...[/red]\")\n            os.system(\"sudo systemctl start ollama\")\n            time.sleep(2)\n            if os.system(\"systemctl is-active --quiet ollama\") == 0:\n                self.console.print(\"[green]Started![/green]\")\n            else:\n                self.console.print(\"[bold red]Failed to start Ollama.[/bold red]\")\n\n    def run_shell(self, cmd):\n        self.console.print(f\"[bold magenta]Running shell:[/bold magenta] {cmd}\")\n        return shell(cmd)\n\n    def rag_search(self, query):\n        # Placeholder: real RAG logic here!\n        return f\"RAG would search for: {query}\"\n\n    def auto_mode(self, prompt):\n        if \"fix\" in prompt and \"ollama\" in prompt:\n            self.fix_ollama()\n            return \"Tried to fix Ollama.\"\n        if \"status\" in prompt:\n            self.check_system_status()\n            return \"Checked system status.\"\n        if \"search\" in prompt:\n            return self.rag_search(prompt)\n        return \"Synapz did not understand. Be more direct, Dave!\"\n\ndef shell(cmd):\n    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out, err = p.communicate()\n    return out.decode() + err.decode()\n