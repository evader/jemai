socket.on('output', (data) => {
                const { output, job_id, final_status } = data; // final_status will be sent from backend now
                let jobElement = jobElements[job_id];
                
                // If jobElement doesn't exist yet, it's a historical update. Recreate based on stored client-side info.
                if (!jobElement) {
                    // This path is usually for `jobs_list_update` that has already handled initial setup.
                    // For streaming updates from current command, jobElement should ALWAYS exist.
                    // If it does get here for a new streaming command, it's a bug with handleExecute not calling updateJobUI upfront.
                    return; 
                }
                
                const preElement = jobElement.querySelector('.output-pre');
                if (preElement) {
                    if (final_status) { // This is the FINAL accumulated output for a command
                        preElement.textContent = output.replace(/</g, "&lt;").replace(/>/g, "&gt;"); 
                    } else { // This is a streaming chunk
                        preElement.textContent += output.replace(/</g, "&lt;").replace(/>/g, "&gt;"); // Append new content for streaming
                    }
                    preElement.scrollTop = preElement.scrollHeight; // Auto-scroll
                }
                
                // Update status badge if final_status is provided
                if (final_status) { 
                    const statusBadge = jobElement.querySelector('.status-badge');
                    if (statusBadge) {
                        statusBadge.innerText = final_status.toUpperCase();
                        statusBadge.className = `status-badge status-${final_status}`; // Apply final status class
                    }
                    setControlsDisabled(false); // Re-enable controls only when THIS job is truly finished
                    // commandInput.focus(); // Set focus back to input
                }
            });