\n# synapz_listener.py - AI OS Clipboard & Action Listener\n\nimport pyperclip\nimport requests\nimport time\nimport datetime\nimport sys\n\n# --- Configuration ---\nAPI_USER = \"super\"\nAPI_PASS = \"TechnoAPI69\"\nTRIGGER_PHRASES = {\n    \"JEMAI-SEARCH::\": \"search\",   # Query memory API\n    \"JEMAI-GET::\": \"get\",         # Fetch memory by hash\n    \"JEMAI-CMD::\": \"shell\",       # Local shell (expandable)\n    \"JEMAI-ACTION::\": \"agent\"     # Send to Synapz or other agents (expandable)\n}\n\ndef memory_search(query, limit=3):\n    apis = [\n        \"http://jemai.local:8089\",\n        \"http://localhost:8089\"\n    ]\n    for api in apis:\n        try:\n            resp = requests.get(\n                f\"{api}/search\",\n                params={\"q\": query, \"limit\": limit},\n                auth=(API_USER, API_PASS),\n                timeout=8\n            )\n            resp.raise_for_status()\n            results = resp.json().get(\"results\", [])\n            if results:\n                print(f\"Memory API success at {api}\")\n            else:\n                print(f\"Memory API success at {api} (no results found)\")\n            return results\n        except Exception as e:\n            print(f\"Memory API failed at {api}: {e}\")\n    return []\n\ndef copy_to_clipboard(text):\n    pyperclip.copy(text)\n    print(f\"--- Result copied to clipboard ---\")\n\ndef process_clipboard_content(content):\n    for prefix, mode in TRIGGER_PHRASES.items():\n        if content.startswith(prefix):\n            payload = content[len(prefix):].strip()\n            if mode == \"search\":\n                print(f\"\\n[Listener] JEMAI Memory Search for: '{payload}'\")\n                results = memory_search(payload)\n                if results:\n                    formatted = \"\\n\\n\".join(\n                        [f\"Title: {r['title']}\\nSource: {r['source']}\\n---\\n{r['text'][:350]}...\" for r in results]\n                    )\n                    copy_to_clipboard(formatted)\n                else:\n                    copy_to_clipboard(\"No results found.\")\n            elif mode == \"get\":\n                print(f\"\\n[Listener] JEMAI Memory Get for hash: '{payload}'\")\n                # Add hash fetch logic here as needed\n            elif mode == \"shell\":\n                print(f\"\\n[Listener] Shell Command (not implemented in this version): '{payload}'\")\n            elif mode == \"agent\":\n                print(f\"\\n[Listener] Send to agent (expand as needed): '{payload}'\")\n            return True\n    return False\n\ndef main():\n    print(f\"=== Synapz Clipboard Listener Started ===\")\n    print(f\"Watching for triggers: {', '.join(TRIGGER_PHRASES.keys())}\")\n    last_clipboard_content = \"\"\n    while True:\n        try:\n            current = pyperclip.paste()\n            if current != last_clipboard_content:\n                last_clipboard_content = current\n                if not process_clipboard_content(current):\n                    pass # Unrecognized trigger, ignore\n            time.sleep(1)\n        except Exception as e:\n            print(f\"Listener error: {e}\", file=sys.stderr)\n            time.sleep(2)\n\nif __name__ == \"__main__\":\n    main()\n