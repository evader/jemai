\n#!/usr/bin/env python3\nimport socket, threading, os, sys, json, time, platform, random, subprocess\n\nNODE_NAME = os.environ.get('SYNAPZ_NODE', platform.node() or 'unnamed')\nCLUSTER_PORT = 57272\nSYNC_INTERVAL = 7\n\n# Memory file for basic \"mesh brain\"\nMEM_FILE = os.path.expanduser(f\"~/.synapz_{NODE_NAME}_mem.json\")\n\ndef log(msg): print(f\"[{NODE_NAME}] {msg}\")\n\ndef save_mem(data):\n    with open(MEM_FILE, 'w') as f: json.dump(data, f)\n\ndef load_mem():\n    try:\n        with open(MEM_FILE, 'r') as f: return json.load(f)\n    except: return {}\n\ndef discover_nodes():\n    # UDP broadcast \"here I am\" on LAN\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)\n    msg = json.dumps({\"type\": \"synapz_hello\", \"node\": NODE_NAME, \"platform\": platform.system()})\n    sock.sendto(msg.encode(), ('<broadcast>', CLUSTER_PORT))\n    sock.close()\n\ndef listen():\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    sock.bind(('', CLUSTER_PORT))\n    while True:\n        data, addr = sock.recvfrom(4096)\n        try:\n            msg = json.loads(data.decode())\n            if msg.get('type') == 'synapz_hello' and msg.get('node') != NODE_NAME:\n                log(f\"Found node: {msg['node']} @ {addr[0]} ({msg.get('platform')})\")\n                peers = load_mem().get('peers', [])\n                if addr[0] not in peers:\n                    peers.append(addr[0])\n                    mem = load_mem()\n                    mem['peers'] = peers\n                    save_mem(mem)\n        except Exception as e:\n            log(f\"Error parsing message: {e}\")\n\ndef shell_agent(cmd):\n    if cmd.startswith(\"ls\") or cmd.startswith(\"cat\") or cmd.startswith(\"ps\"):\n        return subprocess.getoutput(cmd)\n    elif cmd == \"beer\":\n        return \"Go get yourself one, you legend. \ud83c\udf7a\"\n    elif cmd == \"lights off\":\n        return \"Pretending to turn the lights off. (Next: Home Assistant API!)\"\n    elif cmd.startswith(\"trade\"):\n        return \"I'll check that RSS for you and let you know when it's time.\"\n    else:\n        return f\"AI: {cmd[::-1]} (pretend I'm clever for now)\"\n\ndef repl():\n    log(\"Synapz Node CLI. Anything you type will run, mesh-sync every 7s. Ctrl-C to exit.\")\n    while True:\n        try:\n            cmd = input(\"> \")\n            if cmd.strip() == \"nodes\":\n                peers = load_mem().get('peers', [])\n                print(f\"Known nodes: {peers}\")\n            else:\n                print(shell_agent(cmd))\n        except (EOFError, KeyboardInterrupt):\n            break\n\ndef mesh_sync():\n    while True:\n        time.sleep(SYNC_INTERVAL)\n        discover_nodes()\n\nif __name__ == \"__main__\":\n    # Start mesh listener & discovery\n    threading.Thread(target=listen, daemon=True).start()\n    threading.Thread(target=mesh_sync, daemon=True).start()\n    repl()\n