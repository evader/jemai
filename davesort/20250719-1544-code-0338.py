\nimport os, subprocess, time, ctypes, threading\n\ndef user_active():\n    # Windows API to detect idle time\n    class LASTINPUTINFO(ctypes.Structure):\n        _fields_ = [(\"cbSize\", ctypes.c_uint), (\"dwTime\", ctypes.c_uint)]\n    lii = LASTINPUTINFO()\n    lii.cbSize = ctypes.sizeof(LASTINPUTINFO)\n    ctypes.windll.user32.GetLastInputInfo(ctypes.byref(lii))\n    millis = ctypes.windll.kernel32.GetTickCount() - lii.dwTime\n    return millis < 60 * 1000  # 1 minute idle = inactive\n\ndef launch_shell():\n    # Your CLI/chat interface goes here (Ollama, Synapz, whatever)\n    os.system(\"start cmd /k python jemai_cli.py\")  # Replace with your shell!\n\ndef run_autonomous_tasks():\n    print(\"[Supernode] Running autonomous background jobs...\")\n    # Could be anything: mining, docker-compose up, file sync, training, etc.\n    # Example: WSL2 Ubuntu job\n    subprocess.Popen(['wsl', 'python3', '/mnt/c/Users/Dave/your_job.py'])\n    # Example: Docker mining\n    # subprocess.Popen(['docker', 'run', '--rm', 'crypto-miner'])\n    # Example: RAG/AI job\n    # subprocess.Popen(['python', 'jemai_autonomous.py'])\n\ndef main():\n    active = True\n    while True:\n        if user_active():\n            if not active:\n                print(\"[Supernode] User back. Killing jobs & launching shell.\")\n                # Kill autonomous jobs (if any)\n                # ...\n                launch_shell()\n                active = True\n        else:\n            if active:\n                print(\"[Supernode] User away. Entering autonomous mode.\")\n                run_autonomous_tasks()\n                active = False\n        time.sleep(10)\n\nif __name__ == \"__main__\":\n    threading.Thread(target=main).start()\n