\nfrom flask import Flask, request, jsonify\nfrom langchain.chains import RetrievalQA\nfrom langchain.vectorstores import Chroma\nfrom langchain.embeddings import HuggingFaceEmbeddings\nfrom langchain.prompts import PromptTemplate\nfrom langchain.llms import Ollama\n\nimport os\nimport logging\n\napp = Flask(__name__)\n\n# Setup logging\nlogging.basicConfig(level=logging.INFO)\n\n# Paths\nCHROMA_PATH = \"./rag/chroma_data\"\nGENESIS_PATH = \"./persona/synapz_genesis.txt\"\n\n# Load LLM (you can swap to LM Studio or GPTQ later)\nllm = Ollama(model=\"llama3\")\n\n# Load embeddings\nembedding_function = HuggingFaceEmbeddings(model_name=\"sentence-transformers/all-MiniLM-L6-v2\")\n\n# Load vector store\ndb = Chroma(persist_directory=CHROMA_PATH, embedding_function=embedding_function)\nretriever = db.as_retriever()\n\n# Load Synapz Genesis prompt\nif os.path.exists(GENESIS_PATH):\n    with open(GENESIS_PATH, \"r\") as f:\n        SYNAPZ_PERSONA = f.read()\nelse:\n    SYNAPZ_PERSONA = \"You are Synapz Core, the autonomous AI daemon within JEM AI.\"\n\n# Create prompt template\nprompt_template = PromptTemplate.from_template(\"\"\"\n{persona}\n\nContext:\n{context}\n\nUser Question:\n{question}\n\"\"\")\n\n# Build QA chain\nqa_chain = RetrievalQA.from_chain_type(\n    llm=llm,\n    retriever=retriever,\n    chain_type=\"stuff\",\n    chain_type_kwargs={\"prompt\": prompt_template.partial(persona=SYNAPZ_PERSONA)}\n)\n\n@app.route('/query', methods=['POST'])\ndef query():\n    data = request.get_json()\n    question = data.get(\"query\", \"\")\n    if not question:\n        return jsonify({\"error\": \"No query provided\"}), 400\n\n    logging.info(f\"Received query: {question}\")\n    try:\n        result = qa_chain.run(question)\n        return jsonify({\"response\": result})\n    except Exception as e:\n        logging.exception(\"Error handling query\")\n        return jsonify({\"error\": str(e)}), 500\n\nif __name__ == '__main__':\n    logging.info(\"\ud83d\udd0c Synapz Core Flask server starting...\")\n    app.run(host=\"0.0.0.0\", port=11435)\n