\nimport os, subprocess, sys, json\nfrom prompt_toolkit import PromptSession\nfrom rich.console import Console\nfrom ollama import Client as OllamaClient\nimport requests\n\nconsole = Console()\nollama_host = os.environ.get(\"OLLAMA_HOST\", \"http://localhost:11434\")\nollama = OllamaClient(host=ollama_host)\n\n# Models\ndef list_models():\n    models = ollama.list()[\"models\"]\n    for idx, m in enumerate(models):\n        console.print(f\"[{idx+1}] {m['name']}\")\n    return models\n\ndef pick_model():\n    models = list_models()\n    idx = input(\"Pick model [1-{}] (Enter for default=llama3:latest): \".format(len(models)))\n    if idx.strip() == \"\": return \"llama3:latest\"\n    try: return models[int(idx)-1][\"name\"]\n    except: return \"llama3:latest\"\n\ncurrent_model = pick_model()\nconsole.print(f\"[bold green]Chatting with: {current_model}[/bold green]\")\nconsole.print(\"\"\"Commands:\n  !cmd      => shell command\n  read fn   => read file\n  write fn  => write file (paste, Ctrl-D to save)\n  append fn => append file (paste, Ctrl-D to save)\n  !synapz   => pipe to Synapz agent (if running)\n  Anything else = AI chat\nCtrl+C/Ctrl+D to quit.\n\"\"\")\n\ndef shell(cmd):\n    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out, err = p.communicate()\n    return out.decode() + err.decode()\n\ndef ollama_chat(model, prompt):\n    response = ollama.chat(model=model, messages=[{\"role\":\"user\",\"content\":prompt}])\n    return response[\"message\"][\"content\"]\n\ndef synapz_pipe(prompt):\n    try:\n        r = requests.post(\"http://localhost:6000/api\", json={\"message\":prompt}, timeout=3)\n        return r.json().get(\"response\", str(r.text))\n    except Exception as e:\n        return f\"[SYNAPZ not running or error] {e}\"\n\ndef file_read(fn):\n    try:\n        with open(fn, \"r\") as f: return f.read()\n    except Exception as e: return f\"[FILE ERROR] {e}\"\n\ndef file_write(fn):\n    console.print(f\"Paste file contents for [bold]{fn}[/bold], Ctrl-D to save:\")\n    data = sys.stdin.read()\n    try:\n        with open(fn, \"w\") as f: f.write(data)\n        return \"[OK] Written.\"\n    except Exception as e: return f\"[FILE ERROR] {e}\"\n\ndef file_append(fn):\n    console.print(f\"Paste data to append to [bold]{fn}[/bold], Ctrl-D to save:\")\n    data = sys.stdin.read()\n    try:\n        with open(fn, \"a\") as f: f.write(data)\n        return \"[OK] Appended.\"\n    except Exception as e: return f\"[FILE ERROR] {e}\"\n\n# Main loop\nsession = PromptSession(\"> \")\nwhile True:\n    try:\n        user = session.prompt()\n        if user.startswith(\"!cmd \"):\n            console.print(shell(user[5:]))\n        elif user.startswith(\"read \"):\n            console.print(file_read(user.split(\" \",1)[1]))\n        elif user.startswith(\"write \"):\n            console.print(file_write(user.split(\" \",1)[1]))\n        elif user.startswith(\"append \"):\n            console.print(file_append(user.split(\" \",1)[1]))\n        elif user.startswith(\"!synapz \"):\n            console.print(synapz_pipe(user[8:]))\n        elif user.strip() in [\"exit\", \"quit\"]:\n            break\n        else:\n            console.print(ollama_chat(current_model, user))\n    except (EOFError, KeyboardInterrupt):\n        break\n