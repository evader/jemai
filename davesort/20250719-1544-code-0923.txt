\ncat <<'EOF' > ~/synapz_super_bootstrap.sh\n#!/bin/bash\nset -euo pipefail\n\n# ---- 0. VARS ----\nREPO=\"https://github.com/david-lee-ai/synapz_core.git\"\nAPP_DIR=\"$HOME/synapz_core\"\nSERVICE_FILE=\"/etc/systemd/system/synapz_core.service\"\nJEMAI_ALIAS_FILE=\"$HOME/.bash_aliases\"\nOLLAMA_BACKUP=\"/home/jemai/ollama_backups\"\nPORTAINER_PORT=9000\nOPENWEBUI_PORT=8080\nLOGFILE=\"$APP_DIR/synapz_install.log\"\n\n# ---- 1. System Preparation ----\nsudo apt-get update\nsudo apt-get install -y python3 python3-venv python3-pip git docker.io curl lsof jq\n\n# ---- 2. VS Code Install ----\nif ! command -v code &>/dev/null; then\n  sudo snap install code --classic || \\\n  sudo apt-get install -y code || true\nfi\n\n# ---- 3. Docker Install/Check ----\nsudo systemctl enable --now docker\n\n# ---- 4. Clone/Update Synapz Core ----\nif [ ! -d \"$APP_DIR\" ]; then\n  git clone $REPO $APP_DIR\nelse\n  cd $APP_DIR && git pull\nfi\n\n# ---- 5. Setup Python venv ----\ncd $APP_DIR\npython3 -m venv venv\nsource venv/bin/activate\npip install --upgrade pip\npip install -r requirements.txt || pip install -r requirements.txt --break-system-packages || true\n\n# ---- 6. Ollama Restore (if backup exists) ----\nif [ -d \"$OLLAMA_BACKUP\" ]; then\n  ollama import $OLLAMA_BACKUP/* || true\nfi\n\n# ---- 7. Open WebUI Docker ----\nif ! lsof -i :$OPENWEBUI_PORT | grep LISTEN; then\n  docker ps | grep open-webui || \\\n  docker run -d --name open-webui --restart always -p $OPENWEBUI_PORT:8080 \\\n    -v openwebui_data:/data \\\n    -v $HOME:/hosthome \\\n    -v /:/hostroot \\\n    -e OLLAMA_BASE_URL=\"http://host.docker.internal:11434\" \\\n    ghcr.io/open-webui/open-webui:main\nfi\n\n# ---- 8. Portainer ----\nif ! lsof -i :$PORTAINER_PORT | grep LISTEN; then\n  docker ps | grep portainer || \\\n  docker run -d -p $PORTAINER_PORT:9000 --name portainer --restart always \\\n    -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest\nfi\n\n# ---- 9. API & CLI AUTODETECT/INSTALL ----\nif ! grep -q 'alias jemai=' $JEMAI_ALIAS_FILE 2>/dev/null; then\n  echo \"alias jemai='python3 $APP_DIR/synapz_core.py'\" >> $JEMAI_ALIAS_FILE\nfi\nif ! grep -q 'alias synapz-log=' $JEMAI_ALIAS_FILE 2>/dev/null; then\n  echo \"alias synapz-log='journalctl -u synapz_core -f'\" >> $JEMAI_ALIAS_FILE\nfi\nif ! grep -q 'alias synapz-api=' $JEMAI_ALIAS_FILE 2>/dev/null; then\n  echo \"alias synapz-api='curl http://localhost:5000/api/v1/command'\" >> $JEMAI_ALIAS_FILE\nfi\nsource $JEMAI_ALIAS_FILE\n\n# ---- 10. Systemd Service: Auto-restart, self-heal, logging ----\nsudo tee $SERVICE_FILE >/dev/null <<SERVICE\n[Unit]\nDescription=Synapz Core Autonomous Agent\nAfter=network.target docker.service\n\n[Service]\nUser=$USER\nWorkingDirectory=$APP_DIR\nExecStart=$APP_DIR/venv/bin/python3 $APP_DIR/synapz_core.py\nRestart=always\nRestartSec=5\nEnvironment=\"PYTHONUNBUFFERED=1\"\nStandardOutput=append:$APP_DIR/synapz_core.log\nStandardError=append:$APP_DIR/synapz_core_error.log\n\n[Install]\nWantedBy=multi-user.target\nSERVICE\n\nsudo systemctl daemon-reload\nsudo systemctl enable synapz_core\nsudo systemctl restart synapz_core\n\n# ---- 11. Healthcheck/Auto-heal Timer ----\nsudo tee /etc/systemd/system/synapz_monitor.timer >/dev/null <<TIMER\n[Unit]\nDescription=Synapz Auto-heal/Monitor Timer\n\n[Timer]\nOnBootSec=2min\nOnUnitActiveSec=2min\n\n[Install]\nWantedBy=timers.target\nTIMER\n\nsudo tee /etc/systemd/system/synapz_monitor.service >/dev/null <<MON\n[Unit]\nDescription=Monitor and Auto-restart Synapz Core if unhealthy\n\n[Service]\nType=oneshot\nExecStart=/bin/bash -c '[ \\$(systemctl is-active synapz_core) = \"active\" ] || sudo systemctl restart synapz_core'\nMON\n\nsudo systemctl daemon-reload\nsudo systemctl enable synapz_monitor.timer\nsudo systemctl start synapz_monitor.timer\n\n# ---- 12. Warmwinds Integration Placeholder (ready for future expansion) ----\nif ! grep -q 'alias warmwinds=' $JEMAI_ALIAS_FILE 2>/dev/null; then\n  echo \"alias warmwinds='echo Warmwinds AI hooks ready for future connection'\" >> $JEMAI_ALIAS_FILE\nfi\n\n# ---- 13. Final System Cleanup & Friendly Output ----\necho \"\u2705 Synapz Super Bootstrap is COMPLETE.\"\necho \"\ud83c\udf10 Open WebUI: http://localhost:$OPENWEBUI_PORT\"\necho \"\ud83d\udce6 Portainer: http://localhost:$PORTAINER_PORT\"\necho \"\ud83d\udda5\ufe0f VS Code: code .   or via browser: http://localhost:8443 (if you install code-server)\"\necho \"\ud83e\udd16 jemai: run 'jemai' in any shell\"\necho \"\ud83d\udee0\ufe0f Synapz Log: 'synapz-log'\"\necho \"\ud83e\uddbe Synapz API: 'synapz-api'\"\necho \"\ud83d\udd01 Auto-healing and watchdog enabled\"\necho \"\ud83d\udee1\ufe0f Error recovery, logging, and full access granted\"\n\nEOF\n\nchmod +x ~/synapz_super_bootstrap.sh\nbash ~/synapz_super_bootstrap.sh\n