\n# jemai_memory_api_v1.0.py\n# JEMAI OS Memory API \u2014 Version 1.0\n# Last Updated: 2025-07-18\n# Built by: [AgentName] (pending) for David Lee\n\"\"\"\nFastAPI service for memory search, get, and write.\nServes as the main brain/memory backend for overlay, listeners, and any agent.\n\"\"\"\n\nfrom fastapi import FastAPI, HTTPException, Query, Depends\nfrom fastapi.responses import JSONResponse\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\nimport sqlite3\nimport hashlib\nimport json\nfrom typing import List, Optional\n\napp = FastAPI(\n    title=\"JEMAI Memory API\",\n    description=\"Core local memory backend for JEMAI OS. Version 1.0\",\n    version=\"1.0\"\n)\n\n# ====== AUTH CONFIG ======\nAPI_USER = \"super\"\nAPI_PASS = \"TechnoAPI69\"\nsecurity = HTTPBasic()\n\ndef verify_auth(credentials: HTTPBasicCredentials = Depends(security)):\n    if credentials.username == API_USER and credentials.password == API_PASS:\n        return True\n    raise HTTPException(status_code=401, detail=\"Unauthorized\")\n\n# ====== DB CONFIG ======\nDB_PATH = \"jemai_hub.sqlite3\"\n\ndef get_conn():\n    return sqlite3.connect(DB_PATH)\n\ndef search_db(query: str, limit: int = 5):\n    conn = get_conn()\n    cur = conn.cursor()\n    try:\n        # Try to match in text, title, or source fields\n        cur.execute(\"\"\"\n            SELECT title, text, source FROM memory\n            WHERE text LIKE ? OR title LIKE ? OR source LIKE ?\n            ORDER BY id DESC\n            LIMIT ?\n        \"\"\", (f\"%{query}%\", f\"%{query}%\", f\"%{query}%\", limit))\n        rows = cur.fetchall()\n        results = [{\"title\": r[0], \"text\": r[1], \"source\": r[2]} for r in rows]\n        return results\n    finally:\n        conn.close()\n\ndef get_by_id(idx: int):\n    conn = get_conn()\n    cur = conn.cursor()\n    try:\n        cur.execute(\"SELECT id, title, text, source FROM memory WHERE id = ?\", (idx,))\n        row = cur.fetchone()\n        if row:\n            return {\"id\": row[0], \"title\": row[1], \"text\": row[2], \"source\": row[3]}\n        return None\n    finally:\n        conn.close()\n\ndef add_entry(title: str, text: str, source: str = \"manual\"):\n    conn = get_conn()\n    cur = conn.cursor()\n    try:\n        cur.execute(\n            \"INSERT INTO memory (title, text, source) VALUES (?, ?, ?)\",\n            (title, text, source)\n        )\n        conn.commit()\n        return cur.lastrowid\n    finally:\n        conn.close()\n\n# ====== ROUTES ======\n\n@app.get(\"/search\", dependencies=[Depends(verify_auth)])\ndef search(q: str = Query(...), limit: int = 5):\n    results = search_db(q, limit=limit)\n    return {\"results\": results, \"count\": len(results)}\n\n@app.get(\"/get\", dependencies=[Depends(verify_auth)])\ndef get(idx: int = Query(...)):\n    entry = get_by_id(idx)\n    if entry:\n        return entry\n    raise HTTPException(status_code=404, detail=\"Not found\")\n\n@app.post(\"/add\", dependencies=[Depends(verify_auth)])\ndef add(data: dict):\n    title = data.get(\"title\") or \"[untitled]\"\n    text = data.get(\"text\") or \"\"\n    source = data.get(\"source\") or \"manual\"\n    idx = add_entry(title, text, source)\n    return {\"status\": \"ok\", \"id\": idx}\n\n@app.get(\"/health\")\ndef health():\n    return {\"status\": \"ok\", \"version\": \"1.0\"}\n\n# Optionally, add a manifest endpoint for agent onboarding:\n@app.get(\"/manifest\")\ndef manifest():\n    return {\n        \"api\": \"JEMAI Memory API\",\n        \"version\": \"1.0\",\n        \"endpoints\": [\"/search\", \"/get\", \"/add\", \"/health\", \"/manifest\"],\n        \"db\": DB_PATH,\n        \"auth_user\": API_USER\n    }\n\n# ====== INITIALIZE DB (run only if DB not initialized) ======\ndef init_db():\n    conn = get_conn()\n    cur = conn.cursor()\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS memory (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            title TEXT,\n            text TEXT,\n            source TEXT\n        )\n    \"\"\")\n    conn.commit()\n    conn.close()\n\nif __name__ == \"__main__\":\n    init_db()\n    import uvicorn\n    uvicorn.run(\"jemai_memory_api_v1.0:app\", host=\"0.0.0.0\", port=8089, reload=True)\n