<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.0/socket.io.min.js"></script>
    <script>
        const commandInput = document.getElementById('command-input'); // Fixed: This was not being properly assigned in stripped version.
        const directButton = document.getElementById('direct-button');
        const localAiButton = document.getElementById('local-ai-button');
        const nexusAiButton = document.getElementById('nexus-ai-button');
        const outputDiv = document.getElementById('output');
        
        const socket = io(); 

        const jobElements = {}; // Stores references to job UI elements

        function setControlsDisabled(disabled) {
            directButton.disabled = disabled;
            localAiButton.disabled = disabled;
            nexusAiButton.disabled = disabled;
            commandInput.disabled = disabled;
        }

        function generateJobId() {
            return `job-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
        }

        // Initialize/Update Job UI
        // Note: For existing jobs from request_jobs_list, 'outputContent' will be the FULL accumulated output.
        // For new jobs, it will be the initial message, then streaming content.
        function updateJobUI(jobId, command, type, status, outputContent) {
            let jobElement = jobElements[jobId];
            if (!jobElement) {
                jobElement = document.createElement('div');
                jobElement.className = 'log-entry';
                jobElement.id = jobId;
                outputDiv.prepend(jobElement); // Insert at the top
                jobElements[jobId] = jobElement; // Store reference
            }

            const promptClass = `prompt-${type.replace('_', '-')}`;
            const statusClass = (status === 'running' || status === 'thinking') ? 'status-running' : (status === 'complete' ? 'status-complete' : 'status-error');
            
            // Build the inner HTML for the job element
            jobElement.innerHTML = `
                <p class="prompt-line ${promptClass}">&nbsp; ${command} <span class="status-badge ${statusClass}">${status.toUpperCase()}</span></p>
                <div class="output-pre"></div>
            `;
            
            const preElement = jobElement.querySelector('.output-pre');
            if (preElement) {
                // For new commands, we get initialOutput then stream updates.
                // For jobs_list_update, outputContent is the full historical output.
                preElement.textContent = outputContent.replace(/</g, "&lt;").replace(/>/g, "&gt;"); // Set textContent, not innerText to preserve formatting
                preElement.scrollTop = preElement.scrollHeight; // Auto-scroll
            }
        }

        async function handleExecute(mode) {
            const inputValue = commandInput.value.trim();
            if (!inputValue) return;

            setControlsDisabled(true);
            commandInput.value = ''; // Clear input immediately
            commandInput.focus();

            const jobId = generateJobId();
            let initialOutput = `--- Sending command to JEM AI: '${inputValue}' via ${mode} mode ---`;
            // Call updateJobUI for the initial job status
            updateJobUI(jobId, inputValue, mode, 'thinking', initialOutput); 

            // Emit Socket.IO event based on mode
            switch (mode) {
                case 'direct':
                    socket.emit('execute', { command: inputValue, job_id: jobId });
                    break;
                case 'local_ai':
                    socket.emit('generate_command', { prompt: inputValue, job_id: jobId });
                    break;
                case 'nexus_ai':
                    // Temporarily re-routing Nexus AI requests to Local AI (Ollama)
                    socket.emit('generate_command', { prompt: inputValue, job_id: jobId });
                    break;
            }
        }

        // Socket.IO event listeners
        socket.on('connect', () => {
            console.log('Connected to JEM AI Lieutenant Socket.IO');
            socket.emit('request_jobs_list'); // Request initial job list on connect
        });

        // This 'output' listener handles both streaming updates AND final status updates
        socket.on('output', (data) => {
            const { output, job_id, final_status } = data; // final_status will be sent from backend now
            let jobEntry = jobElements[job_id];
            
            // Check if jobEntry exists, if not, it's a new job being reported from backend (e.g., from request_jobs_list polling)
            // Initial job creation for handleExecute happens directly in handleExecute for immediate display.
            // For updates, we just need to append.
            if (!jobEntry) {
                 // This path should ideally be used for historical jobs. For new jobs, `handleExecute` creates the element.
                 // For now, let's assume `handleExecute` always creates. If `job_id` is new here without `updateJobUI`,
                 // it means the `request_jobs_list` initial state is coming, or an unrequested job.
                 // Detailed implementation for historical job loading is more complex.
                 // For a running job, jobEntry should exist.
                return; // Guard against unexpected job IDs if not handling historical full state.
            }
            
            const preElement = jobEntry.querySelector('.output-pre');
            if (preElement) {
                if (final_status) { // This is the FINAL chunk of data for a job
                    // Replace content with the final output (full output accumulated in backend)
                    preElement.textContent = output.replace(/</g, "&lt;").replace(/>/g, "&gt;"); 
                } else {
                    // This is a streaming update, append it
                    preElement.textContent += output.replace(/</g, "&lt;").replace(/>/g, "&gt;"); 
                }
                preElement.scrollTop = preElement.scrollHeight; // Auto-scroll
            }
            
            if (final_status) { // Only update status badge and re-enable controls on FINAL status
                const statusBadge = jobEntry.querySelector('.status-badge');
                if (statusBadge) {
                    statusBadge.innerText = final_status.toUpperCase();
                    statusBadge.className = `status-badge status-${final_status}`;
                }
                setControlsDisabled(false); // Re-enable controls when a job is truly finished
            }
        });


        // This event handles updates for ALL jobs from the backend's current state (e.g., on initial connect)
        socket.on('jobs_list_update', (allJobs) => {
            for (const jobId in allJobs) {
                const jobData = allJobs[jobId];
                // Update UI for each job. Output content is the full current output for that job.
                // Mode is guessed based on command content (will improve with backend "mode" tracking)
                updateJobUI(jobId, jobData.command, jobData.command.includes('Nexus') ? 'nexus-ai' : (jobData.output.includes('Generated command') ? 'local-ai' : 'direct'), jobData.status, jobData.output);
                
                // If job is complete or error, ensure controls are re-enabled
                if (jobData.status === 'complete' || jobData.status === 'error') {
                    setControlsDisabled(false);
                }
            }
        });

        socket.on('connect_error', (err) => {
            console.error('Socket.IO connection error:', err);
            outputDiv.innerHTML = `<p class="status-error">Error: Could not connect to JEM AI Lieutenant Socket.IO. Please ensure the backend is running. (${err.message})</p>${outputDiv.innerHTML}`;
            setControlsDisabled(false);
        });

        socket.on('disconnect', () => {
            console.warn('Disconnected from JEM AI Lieutenant Socket.IO');
            outputDiv.innerHTML = `<p class="status-error">Disconnected from JEM AI Lieutenant. Refresh to reconnect.</p>${outputDiv.innerHTML}`;
            setControlsDisabled(false);
        });

        // Attach event listeners for buttons
        directButton.addEventListener('click', () => handleExecute('direct'));
        localAiButton.addEventListener('click', () => handleExecute('local_ai'));
        nexusAiButton.addEventListener('click', () => handleExecute('nexus_ai'));

        // Attach event listener for Enter key in command input
        commandInput.addEventListener('keypress', e => {
            if (e.key === 'Enter') {
                e.preventDefault();
                directButton.click(); // Default action on Enter
            }
        });

        // Initial state: ensure controls are enabled on page load
        setControlsDisabled(false);
    </script>
</body>
</html>