\n#!/usr/bin/env python3\nimport sys, os, subprocess, threading, time, queue, platform\nfrom pathlib import Path\n\n# === CONSTANTS ===\nPROJECT_ROOT = Path.home() / \"jemai_unified\"\nMODELS_ROOT = Path(\"/usr/share/ollama/.ollama/models/blobs\")\nSYNAPZ_CORE = PROJECT_ROOT / \"synapz_core.py\"\nVOICE_DEP = \"pyttsx3\"\nRAG_DEP = \"chromadb\"\nREQUIRED_PY = (3, 10)\n\n# === UTILS ===\ndef ensure_py_version():\n    if sys.version_info < REQUIRED_PY:\n        print(f\"\\n[ERR] Python {REQUIRED_PY[0]}.{REQUIRED_PY[1]}+ required. Upgrade and rerun.\\n\")\n        sys.exit(1)\n\ndef run(cmd):\n    print(f\"[RUN] {cmd}\")\n    return subprocess.run(cmd, shell=True, check=True)\n\ndef pip_install(pkg):\n    try:\n        __import__(pkg)\n    except ImportError:\n        print(f\"[PYPI] Installing {pkg}...\")\n        run(f\"{sys.executable} -m pip install {pkg}\")\n\ndef ensure_dirs():\n    PROJECT_ROOT.mkdir(exist_ok=True)\n    if not MODELS_ROOT.exists():\n        print(f\"[WARN] Ollama model folder missing ({MODELS_ROOT}). Skipping model restore.\")\n    (PROJECT_ROOT / \"history\").mkdir(exist_ok=True)\n\n# === BOOTSTRAP ===\ndef bootstrap():\n    ensure_py_version()\n    ensure_dirs()\n    # Python deps\n    for pkg in [\"openai\", \"requests\", \"pyttsx3\", \"chromadb\", \"flask\", \"psutil\"]:\n        pip_install(pkg)\n    print(\"[OK] Python env ready.\")\n\n    # Synapz Core: Drop in a stub or download if missing\n    if not SYNAPZ_CORE.exists():\n        print(\"[BOOT] Synapz Core not found, creating minimal agent...\")\n        SYNAPZ_CORE.write_text(DEFAULT_SYN_CORE)\n    print(\"[OK] Synapz Core loaded.\")\n\n    print(\"[BOOT] System ready. Launching JEMAI\u2026\\n\")\n    time.sleep(1)\n    jemai_main()\n\n# === SYNAPZ (stub, but will patch itself if new code found in ./history) ===\nDEFAULT_SYN_CORE = \"\"\"\nimport os, threading\ndef synapz_main(): print('[SYNAPZ] Core agent running (stub, will auto-upgrade if newer code found).')\nif __name__ == '__main__': synapz_main()\n\"\"\"\n\n# === VOICE ===\nimport pyttsx3\ndef speak(msg):\n    threading.Thread(target=lambda: pyttsx3.init().say(msg) or pyttsx3.init().runAndWait(), daemon=True).start()\n\n# === RAG (stub; hotplug ChromaDB as needed) ===\ndef rag_query(q):\n    try:\n        import chromadb\n        # Real RAG would go here\n        return f\"[RAG] (stub) Would answer: {q}\"\n    except ImportError:\n        return \"[RAG] Not installed.\"\n\n# === SHELL/AI INTENT PARSER ===\ndef parse_intent(inp):\n    inp = inp.strip()\n    if inp.lower().startswith(\"ls\") or \"list files\" in inp.lower() or \"directory\" in inp.lower():\n        return \"shell\", inp if inp else \"ls -l\"\n    if inp.startswith(\"!synapz\"):\n        return \"synapz\", inp[7:].strip()\n    if \"turn on\" in inp.lower() and \"light\" in inp.lower():\n        return \"ha\", inp\n    if inp.lower().startswith(\"read \"):\n        return \"read\", inp[5:].strip()\n    if inp.lower().startswith(\"write \"):\n        return \"write\", inp[6:].strip()\n    if \"talk\" in inp.lower() or \"say\" in inp.lower():\n        return \"voice\", inp\n    if \"rag\" in inp.lower():\n        return \"rag\", inp\n    return \"ai\", inp\n\n# === FILE OPS ===\ndef read_file(fn):\n    try:\n        with open(fn, \"r\") as f: return f.read()\n    except Exception as e: return f\"[ERR] {e}\"\n\ndef write_file(fn, content):\n    try:\n        with open(fn, \"w\") as f: f.write(content)\n        return \"[OK] Written.\"\n    except Exception as e: return f\"[ERR] {e}\"\n\n# === HOME ASSISTANT (stub) ===\ndef home_assistant(cmd):\n    # Replace with real API calls\n    return \"[HA] (stub) Would send: \" + cmd\n\n# === AUTO-DEBUG ===\ndef auto_debug(e):\n    print(f\"\\n[DEBUGGER] Auto-fix attempt: {e}\")\n    # Insert real repair routines, model reloads, etc.\n\n# === JEMAI MAIN CLI ===\ndef jemai_main():\n    print(f\"\\n[JEMAI] Unified Agent Ready. Type anything:\")\n    print(\"  - Shell commands (ls, cp, mv, etc)\")\n    print(\"  - Read/Write file (read foo.txt, write foo.txt)\")\n    print(\"  - Home Assistant: turn on kitchen lights\")\n    print(\"  - !synapz fix this\")\n    print(\"  - RAG: ask context (rag what did I do yesterday?)\")\n    print(\"  - Just chat normally\\n\")\n    speak(\"Jemai is ready.\")\n    while True:\n        try:\n            cmd = input(\"JEMAI> \").strip()\n            typ, arg = parse_intent(cmd)\n            if typ == \"shell\":\n                os.system(arg)\n            elif typ == \"synapz\":\n                print(\"[SYNAPZ] \" + arg)\n            elif typ == \"ha\":\n                print(home_assistant(arg))\n            elif typ == \"read\":\n                print(read_file(arg))\n            elif typ == \"write\":\n                print(\"Paste content (end with Ctrl-D):\")\n                content = \"\"\n                while True:\n                    try: line = input()\n                    except EOFError: break\n                    content += line + \"\\n\"\n                print(write_file(arg, content))\n            elif typ == \"voice\":\n                print(\"[VOICE]\", arg)\n                speak(arg)\n            elif typ == \"rag\":\n                print(rag_query(arg))\n            elif typ == \"ai\":\n                print(\"[AI] \" + arg)\n        except Exception as e:\n            auto_debug(e)\n\nif __name__ == \"__main__\":\n    bootstrap()\n