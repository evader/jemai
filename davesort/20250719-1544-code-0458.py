\nimport os, sys, time, shutil, datetime, subprocess, difflib, threading, platform, re, requests, socket, json\nfrom pathlib import Path\n\nNODE_TYPE = platform.system().lower()\nSELF_PATH = os.path.abspath(__file__)\nIS_WIN = NODE_TYPE.startswith(\"win\")\nIS_LINUX = NODE_TYPE.startswith(\"linux\")\nIS_MAC = NODE_TYPE.startswith(\"darwin\")\nVERSIONS_DIR = os.path.expanduser(\"~/.jemai_versions\") if not IS_WIN else r\"C:\\jemai_hub\\.jemai_versions\"\nJEMAI_HUB = os.path.expanduser(\"~/jemai_hub\") if not IS_WIN else r\"C:\\jemai_hub\"\nCHROMADB_PORT = 8000  # set to match your ChromaDB port\n\ndef backup_current():\n    os.makedirs(VERSIONS_DIR, exist_ok=True)\n    stamp = datetime.datetime.now().strftime(\"%d-%m-%Y-%H%M%S\")\n    dst = os.path.join(VERSIONS_DIR, f\"jemai_{stamp}.py\")\n    shutil.copy2(SELF_PATH, dst)\n    print(f\"[JEMAI] Backup saved to {dst}\")\n\ndef smoke_test(new_code):\n    test_path = os.path.join(VERSIONS_DIR, \"jemai_test.py\")\n    with open(test_path, \"w\") as f:\n        f.write(new_code)\n    try:\n        output = subprocess.check_output(\n            [sys.executable, test_path, \"--smoketest\"],\n            stderr=subprocess.STDOUT, timeout=20\n        )\n        return True, output.decode(errors=\"replace\")\n    except Exception as e:\n        return False, f\"{type(e).__name__}: {e}\"\n\ndef try_upgrade(new_code, why=\"manual\"):\n    print(f\"[JEMAI] Smoke testing upgrade ({why})...\")\n    ok, out = smoke_test(new_code)\n    if ok:\n        print(f\"[JEMAI] Test passed ({why}). Upgrading!\")\n        backup_current()\n        with open(SELF_PATH, \"w\") as f:\n            f.write(new_code)\n        print(f\"[JEMAI] Upgrade applied! \ud83d\udd04 Reason: {why}\\n\")\n        os.execv(sys.executable, [sys.executable] + sys.argv)\n    else:\n        print(f\"[JEMAI] Upgrade failed ({why})!\\n\", out)\n        print(\"[JEMAI] Staying alive on old code.\\n\")\n\ndef notify(msg, voice=True, desktop=True):\n    print(f\"[JEMAI NOTIFY] {msg}\")\n    # Voice (pyttsx3)\n    if voice:\n        try:\n            import pyttsx3\n            t = threading.Thread(target=lambda: pyttsx3.init().say(msg) or pyttsx3.init().runAndWait(), daemon=True)\n            t.start()\n        except Exception as e:\n            print(f\"[JEMAI] Voice error: {e}\")\n    # Desktop notification\n    if desktop:\n        try:\n            from notifypy import Notify\n            notification = Notify()\n            notification.title = \"JEMAI\"\n            notification.message = msg\n            notification.send()\n        except Exception as e:\n            print(f\"[JEMAI] Notify error: {e}\")\n\ndef get_local_ip():\n    try:\n        return socket.gethostbyname(socket.gethostname())\n    except Exception:\n        return \"127.0.0.1\"\n\ndef sync_with_hub():\n    os.makedirs(JEMAI_HUB, exist_ok=True)\n    # 1. Upload latest code to hub\n    local_code = open(SELF_PATH, \"r\").read()\n    node_name = socket.gethostname()\n    my_codefile = os.path.join(JEMAI_HUB, f\"{node_name}_jemai.py\")\n    with open(my_codefile, \"w\") as f:\n        f.write(local_code)\n    # 2. Download others' code and show difference\n    for file in os.listdir(JEMAI_HUB):\n        if file.endswith(\"_jemai.py\") and file != f\"{node_name}_jemai.py\":\n            their_code = open(os.path.join(JEMAI_HUB, file), \"r\").read()\n            if their_code != local_code:\n                diff = '\\n'.join(difflib.unified_diff(local_code.splitlines(), their_code.splitlines(), lineterm=\"\"))\n                print(f\"[JEMAI] Code diff with {file}:\\n{diff[:2000]}\\n---\")\n    # 3. Optionally auto-merge (ask, or set auto mode)\n    # [todo] Can write a patch if you want auto-merge!\n\ndef sync_chromadb():\n    # If on Windows, try to run ChromaDB as a server and listen\n    # If on Linux, connect to Windows ChromaDB server and sync embeddings\n    try:\n        import chromadb\n    except ImportError:\n        print(\"[JEMAI] ChromaDB not installed.\")\n        return\n    try:\n        client = chromadb.HttpClient(host=\"localhost\" if IS_WIN else \"windows-pc-hostname\", port=CHROMADB_PORT)\n        # Add sync logic here (collections, vectors, etc)\n        print(\"[JEMAI] ChromaDB connection: OK\")\n        # [todo] real merge/sync!\n    except Exception as e:\n        print(f\"[JEMAI] ChromaDB sync failed: {e}\")\n\ndef scan_clipboard():\n    try:\n        if IS_WIN:\n            import win32clipboard\n            win32clipboard.OpenClipboard()\n            d = win32clipboard.GetClipboardData()\n            win32clipboard.CloseClipboard()\n            return d\n        elif IS_LINUX:\n            return subprocess.check_output(\"xclip -o -selection clipboard\", shell=True, timeout=2).decode(errors=\"replace\")\n        elif IS_MAC:\n            return subprocess.check_output(\"pbpaste\", shell=True, timeout=2).decode(errors=\"replace\")\n    except Exception:\n        return \"\"\n\ndef omni_scrape_all():\n    sources = []\n    # Add chatlogs, URLs, settings, scripts, clipboard, browser etc as above\n    # Add from hub folder:\n    for file in os.listdir(JEMAI_HUB):\n        if file.endswith(\".py\"):\n            try:\n                with open(os.path.join(JEMAI_HUB, file)) as f:\n                    sources.append(f.read())\n            except: pass\n    # Clipboard\n    clip = scan_clipboard()\n    if clip and clip not in sources:\n        sources.append(clip)\n    # TODO: Add browser history, VSCode settings, URLs, etc\n    # Try upgrading with each code block\n    for idx, code in enumerate(sources):\n        if code.strip() and \"def \" in code:\n            try_upgrade(code, why=f\"omniscrape block {idx+1}\")\n\ndef device_registry():\n    regfile = os.path.join(JEMAI_HUB, \"jemai_devices.json\")\n    node = {\n        \"hostname\": socket.gethostname(),\n        \"ip\": get_local_ip(),\n        \"type\": NODE_TYPE,\n        \"time\": datetime.datetime.now().strftime(\"%d-%m-%Y %H:%M:%S\"),\n    }\n    devices = []\n    if os.path.exists(regfile):\n        try:\n            devices = json.load(open(regfile))\n        except: pass\n    devices = [d for d in devices if d[\"hostname\"] != node[\"hostname\"]]\n    devices.append(node)\n    with open(regfile, \"w\") as f:\n        json.dump(devices, f, indent=2)\n    print(f\"[JEMAI] Device registry updated: {devices}\")\n\ndef main_loop():\n    print(f\"\\n[{datetime.datetime.now().strftime('%d-%m-%Y %H:%M:%S')}] JEMAI Master process starting.\")\n    notify(\"JEMAI is live!\", voice=True, desktop=True)\n    print(f\"[{datetime.datetime.now().strftime('%d-%m-%Y %H:%M:%S')}] All dependencies present.\")\n    print(f\"[{time.strftime('%H:%M:%S')}] MODEL: [syncing] | VOICE: \ud83d\udd0a | SYS: TODO% CPU, TODO% RAM\")\n    while True:\n        try:\n            line = input(\"JEMAI(llama3:latest)> \").strip()\n            if not line: continue\n            if line.lower() in (\"exit\", \"quit\"):\n                print(\"Bye!\")\n                break\n            # Paste block = upgrade\n            if line.startswith(\"def \") or line.startswith(\"import \") or line.startswith(\"class \"):\n                print(\"[JEMAI] Looks like code. Paste rest and Ctrl-D to finish.\")\n                code = line + \"\\n\"\n                while True:\n                    try: c = input(); code += c + \"\\n\"\n                    except EOFError: break\n                try_upgrade(code)\n                continue\n            if line.lower().startswith(\"sync chromadb\"):\n                sync_chromadb()\n                continue\n            if line.lower().startswith(\"omniscrape\"):\n                omni_scrape_all()\n                continue\n            if line.lower().startswith(\"sync hub\"):\n                sync_with_hub()\n                continue\n            if line.lower().startswith(\"devices\"):\n                device_registry()\n                continue\n            if line.lower().startswith(\"notify \"):\n                notify(line[7:])\n                continue\n            print(f\"[JEMAI] You said: {line}\")\n        except EOFError:\n            print(\"\\n[JEMAI] Paste new code to upgrade, or Ctrl-C/exit to quit.\")\n            try:\n                code = \"\"\n                while True:\n                    c = input()\n                    code += c + \"\\n\"\n            except EOFError:\n                if code.strip():\n                    try_upgrade(code)\n                else:\n                    print(\"[JEMAI] Nothing pasted. Bye!\")\n                    break\n        except KeyboardInterrupt:\n            print(\"\\nInterrupted.\")\n            break\n\nif __name__ == \"__main__\":\n    device_registry()\n    sync_with_hub()\n    omni_scrape_all()\n    main_loop()\n