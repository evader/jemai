\nimport subprocess\nimport re\n\ndef is_shell_command(text):\n    # Simple: if the first word is a common shell command or starts with '/', './'\n    common_cmds = ['ls', 'cat', 'cd', 'rm', 'cp', 'mv', 'grep', 'find', 'chmod', 'chown', 'ps', 'top', 'whoami', 'df', 'du', 'pwd']\n    first_word = text.strip().split(' ')[0]\n    return first_word in common_cmds or text.startswith('/') or text.startswith('./')\n\ndef interpret_english(text):\n    # Stupidly simple, can be improved with LLM\n    if \"directory\" in text or \"listing\" in text or \"files\" in text:\n        return \"ls -l\"\n    if \"current folder\" in text or \"pwd\" in text:\n        return \"pwd\"\n    if \"disk space\" in text:\n        return \"df -h\"\n    # Add more rules as you want\n    return None\n\ndef run_shell(cmd):\n    try:\n        output = subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT)\n        print(output.decode())\n    except subprocess.CalledProcessError as e:\n        print(e.output.decode())\n\ndef ai_chat(text):\n    # Placeholder: swap for real LLM call (Ollama, OpenAI, etc.)\n    print(f\"[AI]: {text} (imagine a smart answer here)\")\n\ndef main():\n    while True:\n        try:\n            text = input(\"> \").strip()\n            if not text: continue\n\n            # 1. Direct shell command\n            if is_shell_command(text):\n                run_shell(text)\n                continue\n\n            # 2. Natural language \u2192 shell command\n            cmd = interpret_english(text)\n            if cmd:\n                print(f\"(interpreted as shell: {cmd})\")\n                run_shell(cmd)\n                continue\n\n            # 3. Otherwise, AI chat\n            ai_chat(text)\n\n        except (KeyboardInterrupt, EOFError):\n            print(\"\\nBye!\")\n            break\n\nif __name__ == \"__main__\":\n    main()\n