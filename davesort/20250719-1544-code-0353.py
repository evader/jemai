\n# jemai_master.py\nimport threading, time, os, sys, platform, socket\nfrom rich.console import Console\n\n# ---- Synapz Core (placeholder - your actual Synapz logic goes here)\nclass Synapz:\n    def __init__(self, console):\n        self.console = console\n    def chat(self, prompt):\n        self.console.print(f\"[magenta]SYNAPZ:[/magenta] {prompt[::-1]}\")  # Replace with AI call!\n\n# ---- Node definition\nclass SynapzNode:\n    def __init__(self, node_name, node_type=\"core\"):\n        self.name = node_name\n        self.type = node_type\n        self.status = \"online\"\n        self.last_heartbeat = time.time()\n\n# ---- Master Cluster Controller\nclass SynapzMaster:\n    def __init__(self, console):\n        self.console = console\n        self.synapz = Synapz(console)\n        self.nodes = {\"localhost\": SynapzNode(socket.gethostname())}\n        self.plugins = {}\n        self.running = True\n\n    def register_plugin(self, name, plugin):\n        self.plugins[name] = plugin\n        self.console.print(f\"[green]Plugin '{name}' registered![/green]\")\n\n    def add_node(self, node_name, node_type=\"generic\"):\n        self.nodes[node_name] = SynapzNode(node_name, node_type)\n        self.console.print(f\"[blue]Node '{node_name}' added ({node_type})![/blue]\")\n\n    def monitor(self):\n        while self.running:\n            self.console.print(\"[cyan]Master monitoring... Nodes:[/cyan]\")\n            for n in self.nodes:\n                self.console.print(f\"Node {n}: {self.nodes[n].status}\")\n            time.sleep(60)\n\n    def start(self):\n        threading.Thread(target=self.monitor, daemon=True).start()\n        self.console.print(\"[bold green]Master started![/bold green]\")\n\nconsole = Console()\nmaster = SynapzMaster(console)\nmaster.start()\n\n# Example: register a fake plugin\ndef ollama_plugin():\n    console.print(\"[yellow]Ollama plugin: placeholder![/yellow]\")\n\nmaster.register_plugin(\"ollama\", ollama_plugin)\n\n# Interactive CLI\nconsole.print(\"[bold blue]Welcome to JEMAI-OS Cluster! Type 'help' for commands.[/bold blue]\")\nwhile True:\n    try:\n        inp = input(\"> \").strip()\n        if inp in (\"exit\", \"quit\"): break\n        elif inp == \"help\":\n            console.print(\"Commands: nodes, chat <msg>, plugin <name>, addnode <name> [type]\")\n        elif inp.startswith(\"nodes\"):\n            for n in master.nodes:\n                console.print(f\"- {n}: {master.nodes[n].type}\")\n        elif inp.startswith(\"addnode\"):\n            _, name, *tp = inp.split()\n            master.add_node(name, tp[0] if tp else \"generic\")\n        elif inp.startswith(\"plugin\"):\n            _, name = inp.split()\n            if name in master.plugins: master.plugins[name]()\n            else: console.print(\"[red]No such plugin[/red]\")\n        elif inp.startswith(\"chat\"):\n            _, *msg = inp.split()\n            master.synapz.chat(\" \".join(msg))\n        else:\n            # Basic smart AI command/classification can go here\n            if inp.startswith(\"ls\") or inp.startswith(\"cat \") or inp.startswith(\"cd \"):\n                os.system(inp)\n            else:\n                master.synapz.chat(inp)\n    except Exception as e:\n        console.print(f\"[red]Error:[/red] {e}\")\n